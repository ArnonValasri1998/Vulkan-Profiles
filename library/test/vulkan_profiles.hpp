/*
 * Copyright (c) 2021-2022 LunarG, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Authors:
 * - Christophe Riccio <christophe@lunarg.com>
 */

#include <vulkan/vulkan_core.h>
#if defined(__APPLE__)
#include <vulkan/vulkan_beta.h>
#endif

#define VP_MAX_PROFILE_NAME_SIZE 256U

#define VP_LUNARG_minimum_requirements 1
#define VP_LUNARG_MINIMUM_REQUIREMENTS_SPEC_VERSION 1
#define VP_LUNARG_MINIMUM_REQUIREMENTS_NAME "VP_KHR_minimum_requirements"
#define VP_LUNARG_MINIMUM_REQUIREMENTS_MIN_VERSION VK_MAKE_VERSION(1, 0, 68)

#define VP_KHR_1_2_roadmap_2022 1
#define VP_KHR_1_2_ROADMAP_2022_SPEC_VERSION 1
#define VP_KHR_1_2_ROADMAP_2022_NAME "VP_KHR_1_2_roadmap_2022"
#define VP_KHR_1_2_ROADMAP_2022_MIN_VERSION VK_MAKE_VERSION(1, 2, 142)

#define VP_LUNARG_1_1_desktop_portability_2022 1
#define VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_SPEC_VERSION 1
#define VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME "VP_LUNARG_1_1_desktop_portability_2022"
#define VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_MIN_API_VERSION VK_MAKE_VERSION(1, 1, 142)

#define countof(arr) sizeof(arr) / sizeof(arr[0])

typedef struct VpProfileProperties {
    char profileName[VP_MAX_PROFILE_NAME_SIZE];
    uint32_t specVersion;
} VpProfileProperties;

typedef enum VpDeviceCreateFlagBits {
    VP_DEVICE_CREATE_OVERRIDE_PROFILE_EXTENSIONS_BIT = 0x00000001,
    VP_DEVICE_CREATE_OVERRIDE_PROFILE_FEATURES_BIT = 0x00000002,
    VP_DEVICE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VpDeviceCreateFlagBits;
typedef VkFlags VpDeviceCreateFlags;

typedef struct VpDeviceCreateInfo {
    const VkDeviceCreateInfo *pCreateInfo;
    const VpProfileProperties *pProfile;
    VpDeviceCreateFlags flags;
} VpDeviceCreateInfo;

void vpGetProfiles(uint32_t *pPropertyCount, VpProfileProperties *pProperties);

VkResult vpGetDeviceProfileSupport(VkPhysicalDevice physicalDevice, const char *pLayerName, VpProfileProperties *pProperties,
                                   VkBool32 *pSupported);

VkResult vpCreateDevice(VkPhysicalDevice physicalDevice, const VpDeviceCreateInfo *pCreateInfo,
                        const VkAllocationCallbacks *pAllocator, VkDevice *pDevice);

void vpGetProfileExtensionProperties(const VpProfileProperties *pProfile, uint32_t *pPropertyCount,
                                     VkExtensionProperties *pProperties);

void vpGetProfileStructures(const VpProfileProperties *pProfile, void *pNext);

typedef enum VpStructureArea { VP_STRUCTURE_FEATURES = 0, VP_STRUCTURE_PROPERTIES } VpStructureArea;

typedef struct VpStructureProperties {
    VkStructureType type;
    VpStructureArea area;
} VpStructureProperties;

void vpGetProfileStructureProperties(const VpProfileProperties *pProfile, uint32_t *pPropertyCount,
                                     VpStructureProperties *pProperties);

void vpGetProfileFormats(const VpProfileProperties *pProfile, uint32_t *pFormatCount, VkFormat *pFormats);

void vpGetProfileFormatProperties(const VpProfileProperties *pProfile, VkFormat format, void *pNext);

void vpGetProfileMemoryTypes(const VpProfileProperties *pProfile, uint32_t *pMemoryTypeCount, VkMemoryPropertyFlags *pMemoryTypes);

void vpGetProfileQueueFamilies(const VpProfileProperties *pProfile, uint32_t *pPropertyCount, VkQueueFamilyProperties *pProperties);

// Implementation details:
#include <cstring>
#include <vector>

static const VkExtensionProperties _VP_KHR_1_2_ROADMAP_2022_EXTENSIONS[] = {
    VkExtensionProperties{VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME, 2},
    VkExtensionProperties{VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_EXT_PRIVATE_DATA_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME, 1}};

static const VkExtensionProperties _VP_KHR_1_1_DESKTOP_PORTABILITY_2022_EXTENSIONS[] = {
    // Vulkan 1.2 extensions
    VkExtensionProperties{VK_KHR_8BIT_STORAGE_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME,
                          1},  // Not supported by Intel 6000 https://vulkan.gpuinfo.org/displayreport.php?id=11332#extensions
    VkExtensionProperties{VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME,
                          1},  // Not supported by Intel 6000 https://vulkan.gpuinfo.org/displayreport.php?id=11332#extensions
    VkExtensionProperties{VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME, 1},

// Additional Vulkan extensions
// VkExtensionProperties{VK_KHR_SWAPCHAIN_EXTENSION_NAME, 70}, VkExtensionProperties{VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME,
// 1},
#if defined(__APPLE__)
    VkExtensionProperties{VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME, 1},  // MacOS only
#endif
    VkExtensionProperties{VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME,
                          1},  // Not supported by Intel 520 https://vulkan.gpuinfo.org/displayreport.php?id=12491#extensions
    VkExtensionProperties{VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_EXT_ROBUSTNESS_2_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME, 1},
    VkExtensionProperties{VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME, 1}};

static const VpStructureProperties _VP_KHR_1_2_ROADMAP_2022_STRUCTURE_PROPERTIES[] = {
    // Features:
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2, VP_STRUCTURE_FEATURES},
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES, VP_STRUCTURE_FEATURES},
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES, VP_STRUCTURE_FEATURES},
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR, VP_STRUCTURE_FEATURES},
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR, VP_STRUCTURE_FEATURES},
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR, VP_STRUCTURE_FEATURES},
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT, VP_STRUCTURE_FEATURES},
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT, VP_STRUCTURE_FEATURES},
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT, VP_STRUCTURE_FEATURES},
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT, VP_STRUCTURE_FEATURES},
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT, VP_STRUCTURE_FEATURES},
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT, VP_STRUCTURE_FEATURES},
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT, VP_STRUCTURE_FEATURES},
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT, VP_STRUCTURE_FEATURES},
    // Properties:
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES, VP_STRUCTURE_PROPERTIES},
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES, VP_STRUCTURE_PROPERTIES},
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2, VP_STRUCTURE_PROPERTIES}};

struct VpFormatProperties {
    VkFormat format;
    VkFlags64 linearTilingFeatures;
    VkFlags64 optimalTilingFeatures;
    VkFlags64 bufferFeatures;
};

static const VpFormatProperties _VP_KHR_1_1_DESKTOP_PORTABILITY_2022_FORMATS[] = {
    // VK_FORMAT_R8_UNORM
    {VK_FORMAT_R8_UNORM,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R8_SNORM
    {VK_FORMAT_R8_SNORM,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R8_UINT
    {VK_FORMAT_R8_UINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R8_SINT
    {VK_FORMAT_R8_SINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R8G8_UNORM
    {VK_FORMAT_R8G8_UNORM,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R8G8_SNORM
    {VK_FORMAT_R8G8_SNORM,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R8G8_UINT
    {VK_FORMAT_R8G8_UINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R8G8_SINT
    {VK_FORMAT_R8G8_SINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R8G8B8A8_UNORM
    {VK_FORMAT_R8G8B8A8_UNORM,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R8G8B8A8_SNORM
    {VK_FORMAT_R8G8B8A8_SNORM,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R8G8B8A8_UINT
    {VK_FORMAT_R8G8B8A8_UINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R8G8B8A8_SINT
    {VK_FORMAT_R8G8B8A8_SINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R8G8B8A8_SRGB
    {VK_FORMAT_R8G8B8A8_SRGB,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},

    // VK_FORMAT_B8G8R8A8_SRGB
    {VK_FORMAT_B8G8R8A8_SRGB,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},

    // VK_FORMAT_A8B8G8R8_UNORM_PACK32
    {VK_FORMAT_A8B8G8R8_UNORM_PACK32,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_A8B8G8R8_SNORM_PACK32
    {VK_FORMAT_A8B8G8R8_UNORM_PACK32,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_A8B8G8R8_UINT_PACK32
    {VK_FORMAT_A8B8G8R8_UINT_PACK32,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},

    // VK_FORMAT_A8B8G8R8_SINT_PACK32
    {VK_FORMAT_A8B8G8R8_SINT_PACK32,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},

    // VK_FORMAT_A8B8G8R8_SRGB_PACK32
    {VK_FORMAT_A8B8G8R8_SRGB_PACK32,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},

    // VK_FORMAT_A2B10G10R10_UNORM_PACK32
    {VK_FORMAT_A2B10G10R10_UNORM_PACK32,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_A2B10G10R10_UINT_PACK32
    {VK_FORMAT_A2B10G10R10_UINT_PACK32,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT},

    // VK_FORMAT_R16_UNORM
    {VK_FORMAT_R16_UNORM,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R16_SNORM
    {VK_FORMAT_R16_SNORM,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R16_UINT
    {VK_FORMAT_R16_UINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R16_SINT
    {VK_FORMAT_R16_SINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R16_SFLOAT
    {VK_FORMAT_R16_SFLOAT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R16G16_UNORM
    {VK_FORMAT_R16G16_UNORM,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R16G16_SNORM
    {VK_FORMAT_R16G16_SNORM,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R16G16_UINT
    {VK_FORMAT_R16G16_UINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R16G16_SINT
    {VK_FORMAT_R16G16_SINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R16G16_SFLOAT
    {VK_FORMAT_R16G16_SFLOAT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R16G16B16A16_UNORM
    {VK_FORMAT_R16G16B16A16_UNORM,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R16G16B16A16_SNORM
    {VK_FORMAT_R16G16B16A16_SNORM,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R16G16B16A16_UINT
    {VK_FORMAT_R16G16B16A16_UINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R16G16B16A16_SINT
    {VK_FORMAT_R16G16B16A16_SINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R16G16B16A16_SFLOAT
    {VK_FORMAT_R16G16B16A16_SFLOAT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R32_UINT
    {VK_FORMAT_R32_UINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R32_SINT
    {VK_FORMAT_R32_SINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R32_SFLOAT
    {VK_FORMAT_R32_SFLOAT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R32G32_UINT
    {VK_FORMAT_R32G32_UINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R32G32_SINT
    {VK_FORMAT_R32G32_SINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R32G32_SFLOAT
    {VK_FORMAT_R32G32_SFLOAT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R32G32B32A32_UINT
    {VK_FORMAT_R32G32B32A32_UINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R32G32B32A32_SINT
    {VK_FORMAT_R32G32B32A32_SINT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_R32G32B32A32_SFLOAT
    {VK_FORMAT_R32G32B32A32_SFLOAT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},

    // VK_FORMAT_B10G11R11_UFLOAT_PACK32
    {VK_FORMAT_B10G11R11_UFLOAT_PACK32,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
         VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
         VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT},

    // VK_FORMAT_E5B9G9R9_UFLOAT_PACK32
    {VK_FORMAT_E5B9G9R9_UFLOAT_PACK32,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},

    // VK_FORMAT_D16_UNORM
    {VK_FORMAT_D16_UNORM, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT |
         VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},

    // VK_FORMAT_D32_SFLOAT
    {VK_FORMAT_D32_SFLOAT, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT |
         VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},

    // VK_FORMAT_D32_SFLOAT_S8_UINT
    {VK_FORMAT_D32_SFLOAT_S8_UINT, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},

    // VK_FORMAT_BC1_RGB_UNORM_BLOCK
    {VK_FORMAT_BC1_RGB_UNORM_BLOCK, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},
    // VK_FORMAT_BC1_RGB_SRGB_BLOCK
    {VK_FORMAT_BC1_RGB_SRGB_BLOCK, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},
    // VK_FORMAT_BC1_RGBA_UNORM_BLOCK
    {VK_FORMAT_BC1_RGBA_UNORM_BLOCK, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},
    // VK_FORMAT_BC1_RGBA_SRGB_BLOCK
    {VK_FORMAT_BC1_RGBA_SRGB_BLOCK, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},
    // VK_FORMAT_BC2_UNORM_BLOCK
    {VK_FORMAT_BC2_UNORM_BLOCK, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},
    // VK_FORMAT_BC2_SRGB_BLOCK
    {VK_FORMAT_BC2_SRGB_BLOCK, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},
    // VK_FORMAT_BC3_UNORM_BLOCK
    {VK_FORMAT_BC3_UNORM_BLOCK, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},
    // VK_FORMAT_BC3_SRGB_BLOCK
    {VK_FORMAT_BC3_SRGB_BLOCK, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},
    // VK_FORMAT_BC4_UNORM_BLOCK
    {VK_FORMAT_BC4_UNORM_BLOCK, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},
    // VK_FORMAT_BC4_SNORM_BLOCK
    {VK_FORMAT_BC4_SNORM_BLOCK, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},
    // VK_FORMAT_BC5_UNORM_BLOCK
    {VK_FORMAT_BC5_UNORM_BLOCK, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},
    // VK_FORMAT_BC5_SNORM_BLOCK
    {VK_FORMAT_BC5_SNORM_BLOCK, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},
    // VK_FORMAT_BC6H_UFLOAT_BLOCK
    {VK_FORMAT_BC6H_UFLOAT_BLOCK, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},
    // VK_FORMAT_BC6H_SFLOAT_BLOCK
    {VK_FORMAT_BC6H_SFLOAT_BLOCK, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},
    // VK_FORMAT_BC7_UNORM_BLOCK
    {VK_FORMAT_BC7_UNORM_BLOCK, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0},
    // VK_FORMAT_BC7_SRGB_BLOCK
    {VK_FORMAT_BC7_SRGB_BLOCK, 0,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
         VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
     0}};

static const VpStructureProperties _VP_KHR_1_1_DESKTOP_PORTABILITY_2022_STRUCTURE_PROPERTIES[] = {
// Features:
#if defined(__APPLE__)
    {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR,
#endif
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES, VP_STRUCTURE_FEATURES},
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES, VP_STRUCTURE_FEATURES},
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES, VP_STRUCTURE_FEATURES},
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES, VP_STRUCTURE_FEATURES},
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES, VP_STRUCTURE_FEATURES},
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES, VP_STRUCTURE_FEATURES},
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES, VP_STRUCTURE_FEATURES},
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES, VP_STRUCTURE_FEATURES},
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES, VP_STRUCTURE_FEATURES},
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES, VP_STRUCTURE_FEATURES},
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES, VP_STRUCTURE_FEATURES},
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2, VP_STRUCTURE_FEATURES},
// Properties:
#if defined(__APPLE__)
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR, VP_STRUCTURE_PROPERTIES},
#endif
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES, VP_STRUCTURE_PROPERTIES},
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES, VP_STRUCTURE_PROPERTIES},
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT, VP_STRUCTURE_PROPERTIES},
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES, VP_STRUCTURE_PROPERTIES},
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES, VP_STRUCTURE_PROPERTIES},
     {VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2, VP_STRUCTURE_PROPERTIES}};

static const VkMemoryPropertyFlags _VP_KHR_1_1_DESKTOP_PORTABILITY_2022_MEMORY_TYPES[] = {
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT};

static const VkQueueFamilyProperties _VP_KHR_1_1_DESKTOP_PORTABILITY_2022_QUEUE_FAMILY_PROPERTIES[] = {
    {VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT, 1, 36, {1, 1, 1}}};

inline bool _vpCheckExtension(const VkExtensionProperties *supportedProperties, std::size_t supportedSize,
                              const char *requestedExtension) {
    for (size_t i = 0, n = supportedSize; i < n; ++i) {
        if (strcmp(supportedProperties[i].extensionName, requestedExtension) == 0) return true;
    }

    return false;
}

inline bool _vpCheckMemoryProperty(const VkPhysicalDeviceMemoryProperties &memoryProperties,
                                   const VkMemoryPropertyFlags &memoryPropertyFlags) {
    assert(&memoryProperties != nullptr);

    for (size_t i = 0, n = memoryProperties.memoryTypeCount; i < n; ++i) {
        if ((memoryProperties.memoryTypes[i].propertyFlags & memoryPropertyFlags) == memoryPropertyFlags) return true;
    }

    return false;
}

inline bool _vpCheckFormatProperty(const VkFormatProperties2 *deviceProps, const VpFormatProperties &profileProps) {
    if ((deviceProps->formatProperties.linearTilingFeatures & profileProps.linearTilingFeatures) !=
        profileProps.linearTilingFeatures) {
        return false;
    } else if ((deviceProps->formatProperties.optimalTilingFeatures & profileProps.optimalTilingFeatures) !=
               profileProps.optimalTilingFeatures) {
        return false;
    } else if ((deviceProps->formatProperties.bufferFeatures & profileProps.bufferFeatures) != profileProps.bufferFeatures) {
        return false;
    }

    return true;
}

inline bool _vpCheckQueueFamilyProperty(const VkQueueFamilyProperties *queueFamilyProperties,
                                        std::size_t queueFamilyPropertiesCount,
                                        const VkQueueFamilyProperties &profileQueueFamilyPropertie) {
    assert(queueFamilyProperties != nullptr);

    for (size_t i = 0, n = queueFamilyPropertiesCount; i < n; ++i) {
        if (queueFamilyProperties[i].queueCount < profileQueueFamilyPropertie.queueCount) {
            continue;
        } else if (queueFamilyProperties[i].timestampValidBits < profileQueueFamilyPropertie.timestampValidBits) {
            continue;
        } else if (queueFamilyProperties[i].minImageTransferGranularity.width >
                   profileQueueFamilyPropertie.minImageTransferGranularity.width) {
            continue;
        } else if (queueFamilyProperties[i].minImageTransferGranularity.height >
                   profileQueueFamilyPropertie.minImageTransferGranularity.height) {
            continue;
        } else if (queueFamilyProperties[i].minImageTransferGranularity.depth >
                   profileQueueFamilyPropertie.minImageTransferGranularity.depth) {
            continue;
        } else if ((queueFamilyProperties[i].queueFlags & profileQueueFamilyPropertie.queueFlags) !=
                   profileQueueFamilyPropertie.queueFlags) {
            continue;
        }

        return true;
    }

    return false;
}

inline void *_vpGetStructure(void *pNext, VkStructureType type) {
    if (pNext == nullptr) {
        return nullptr;
    }

    struct VkStruct {
        VkStructureType sType;
        void *pNext;
    };

    VkStruct *p = static_cast<VkStruct *>(pNext);

    if (p->sType == type) {
        return pNext;
    } else {
        return _vpGetStructure(p->pNext, type);
    }
}

inline void vpGetProfiles(uint32_t* pPropertyCount, VpProfileProperties* pProperties) {
    static const VpProfileProperties table[] = {
        {VP_KHR_1_2_ROADMAP_2022_NAME, VP_KHR_1_2_ROADMAP_2022_SPEC_VERSION}, 
        {VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME, VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_SPEC_VERSION}
    };

    if (pProperties == nullptr) {
        *pPropertyCount = countof(table);
        return;
    }

    for (std::size_t i = 0, n = std::min<std::size_t>(countof(table), *pPropertyCount); i < n; ++i) {
        pProperties[i] = table[i];
    }
}

inline void vpGetProfileStructures(const VpProfileProperties *pProfile, void *pNext) {
    if (pProfile == nullptr || pNext == nullptr) return;

    struct VkStruct {
        VkStructureType sType;
        void *pNext;
    };

    VkStruct *p = static_cast<VkStruct *>(pNext);

    if (strcmp(pProfile->profileName, VP_LUNARG_MINIMUM_REQUIREMENTS_NAME) == 0)
        return;
    else if (strcmp(pProfile->profileName, VP_KHR_1_2_ROADMAP_2022_NAME) == 0) {
        while (p != nullptr) {
            switch (p->sType) {
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2: {
                    VkPhysicalDeviceFeatures2 *features = (VkPhysicalDeviceFeatures2 *)p;
                    features->features.robustBufferAccess = VK_TRUE;
                    features->features.imageCubeArray = VK_TRUE;
                    features->features.independentBlend = VK_TRUE;
                    features->features.sampleRateShading = VK_TRUE;
                    features->features.drawIndirectFirstInstance = VK_TRUE;
                    features->features.depthBiasClamp = VK_TRUE;
                    features->features.samplerAnisotropy = VK_TRUE;
                    features->features.occlusionQueryPrecise = VK_TRUE;
                    features->features.fragmentStoresAndAtomics = VK_TRUE;
                    features->features.shaderStorageImageExtendedFormats = VK_TRUE;
                    features->features.shaderStorageImageReadWithoutFormat = VK_TRUE;
                    features->features.shaderUniformBufferArrayDynamicIndexing = VK_TRUE;
                    features->features.shaderSampledImageArrayDynamicIndexing = VK_TRUE;
                    features->features.shaderStorageBufferArrayDynamicIndexing = VK_TRUE;
                    features->features.shaderStorageImageArrayDynamicIndexing = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES: {
                    VkPhysicalDeviceVulkan11Features *features = (VkPhysicalDeviceVulkan11Features *)p;
                    features->multiview = VK_TRUE;
                    features->samplerYcbcrConversion = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES: {
                    VkPhysicalDeviceVulkan12Features *features = (VkPhysicalDeviceVulkan12Features *)p;
                    features->samplerMirrorClampToEdge = VK_TRUE;
                    features->shaderUniformTexelBufferArrayDynamicIndexing = VK_TRUE;
                    features->uniformBufferStandardLayout = VK_TRUE;
                    features->shaderSubgroupExtendedTypes = VK_TRUE;
                    features->separateDepthStencilLayouts = VK_TRUE;
                    features->hostQueryReset = VK_TRUE;
                    features->bufferDeviceAddress = VK_TRUE;
                    features->vulkanMemoryModel = VK_TRUE;
                    features->vulkanMemoryModelDeviceScope = VK_TRUE;
                    features->vulkanMemoryModelAvailabilityVisibilityChains = VK_TRUE;
                    features->subgroupBroadcastDynamicId = VK_TRUE;
                    features->imagelessFramebuffer = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR: {
                    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR *features =
                        (VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR *)p;
                    features->shaderTerminateInvocation = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR: {
                    VkPhysicalDeviceSynchronization2FeaturesKHR *features = (VkPhysicalDeviceSynchronization2FeaturesKHR *)p;
                    features->synchronization2 = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR: {
                    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR *features =
                        (VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR *)p;
                    features->shaderZeroInitializeWorkgroupMemory = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT: {
                    VkPhysicalDeviceImageRobustnessFeaturesEXT *features = (VkPhysicalDeviceImageRobustnessFeaturesEXT *)p;
                    features->robustImageAccess = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT: {
                    VkPhysicalDeviceInlineUniformBlockFeaturesEXT *features = (VkPhysicalDeviceInlineUniformBlockFeaturesEXT *)p;
                    features->inlineUniformBlock = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT: {
                    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT *features =
                        (VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT *)p;
                    features->pipelineCreationCacheControl = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT: {
                    VkPhysicalDevicePrivateDataFeaturesEXT *features = (VkPhysicalDevicePrivateDataFeaturesEXT *)p;
                    features->privateData = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT: {
                    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT *features =
                        (VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT *)p;
                    features->shaderDemoteToHelperInvocation = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT: {
                    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT *features = (VkPhysicalDeviceSubgroupSizeControlFeaturesEXT *)p;
                    features->subgroupSizeControl = VK_TRUE;
                    features->computeFullSubgroups = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT: {
                    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT *features =
                        (VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT *)p;
                    features->texelBufferAlignment = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT: {
                    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT *features =
                        (VkPhysicalDeviceExtendedDynamicState2FeaturesEXT *)p;
                    features->extendedDynamicState2 = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2: {
                    VkPhysicalDeviceProperties2 *properties = (VkPhysicalDeviceProperties2 *)p;
                    properties->properties.limits.maxImageDimension1D = 8192;
                    properties->properties.limits.maxImageDimension2D = 8192;
                    properties->properties.limits.maxImageDimensionCube = 8192;
                    properties->properties.limits.maxImageArrayLayers = 2048;
                    properties->properties.limits.maxUniformBufferRange = 65536;
                    properties->properties.limits.bufferImageGranularity = 4096;
                    properties->properties.limits.maxPerStageDescriptorSamplers = 64;
                    properties->properties.limits.maxPerStageDescriptorUniformBuffers = 15;
                    properties->properties.limits.maxPerStageDescriptorStorageBuffers = 30;
                    properties->properties.limits.maxPerStageDescriptorSampledImages = 200;
                    properties->properties.limits.maxPerStageDescriptorStorageImages = 16;
                    properties->properties.limits.maxPerStageResources = 200;
                    properties->properties.limits.maxDescriptorSetSamplers = 576;
                    properties->properties.limits.maxDescriptorSetUniformBuffers = 90;
                    properties->properties.limits.maxDescriptorSetStorageBuffers = 96;
                    properties->properties.limits.maxDescriptorSetSampledImages = 1800;
                    properties->properties.limits.maxDescriptorSetStorageImages = 144;
                    properties->properties.limits.maxFragmentCombinedOutputResources = 16;
                    properties->properties.limits.maxComputeWorkGroupInvocations = 256;
                    properties->properties.limits.maxComputeWorkGroupSize[0] = 256;
                    properties->properties.limits.maxComputeWorkGroupSize[1] = 256;
                    properties->properties.limits.maxComputeWorkGroupSize[2] = 64;
                    properties->properties.limits.subTexelPrecisionBits = 8;
                    properties->properties.limits.mipmapPrecisionBits = 6;
                    properties->properties.limits.maxSamplerLodBias = 14.0;
                    properties->properties.limits.pointSizeGranularity = 0.125;
                    properties->properties.limits.lineWidthGranularity = 0.5;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES: {
                    VkPhysicalDeviceVulkan11Properties *properties = (VkPhysicalDeviceVulkan11Properties *)p;
                    properties->subgroupSize = 4;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES: {
                    VkPhysicalDeviceVulkan12Properties *properties = (VkPhysicalDeviceVulkan12Properties *)p;
                    properties->shaderSignedZeroInfNanPreserveFloat16 = VK_TRUE;
                    properties->shaderSignedZeroInfNanPreserveFloat32 = VK_TRUE;
                    properties->maxPerStageDescriptorUpdateAfterBindInputAttachments = 7;
                } break;
                default:
                    break;
            }
            p = static_cast<VkStruct *>(p->pNext);
        }
    } else if (strcmp(pProfile->profileName, VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME) == 0) {
        while (p != nullptr) {
            switch (p->sType) {
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2: {
                    VkPhysicalDeviceFeatures2 *features = (VkPhysicalDeviceFeatures2 *)p;
                    features->features.depthBiasClamp = VK_TRUE;
                    features->features.depthClamp = VK_TRUE;
                    features->features.drawIndirectFirstInstance = VK_TRUE;
                    features->features.dualSrcBlend = VK_TRUE;
                    features->features.fillModeNonSolid = VK_TRUE;
                    features->features.fragmentStoresAndAtomics = VK_TRUE;
                    features->features.fullDrawIndexUint32 = VK_TRUE;
                    features->features.imageCubeArray = VK_TRUE;
                    features->features.independentBlend = VK_TRUE;
                    features->features.inheritedQueries = VK_TRUE;
                    features->features.largePoints = VK_TRUE;
                    features->features.multiDrawIndirect = VK_TRUE;
                    features->features.multiViewport = VK_TRUE;
                    features->features.occlusionQueryPrecise = VK_TRUE;
                    features->features.robustBufferAccess = VK_TRUE;
                    features->features.sampleRateShading = VK_TRUE;
                    features->features.samplerAnisotropy = VK_TRUE;
                    features->features.shaderClipDistance = VK_TRUE;
                    features->features.shaderImageGatherExtended = VK_TRUE;
                    features->features.shaderSampledImageArrayDynamicIndexing = VK_TRUE;
                    features->features.shaderStorageBufferArrayDynamicIndexing = VK_TRUE;
                    features->features.shaderStorageImageArrayDynamicIndexing = VK_TRUE;
                    features->features.shaderStorageImageExtendedFormats = VK_TRUE;
                    features->features.shaderStorageImageWriteWithoutFormat = VK_TRUE;
                    features->features.shaderTessellationAndGeometryPointSize = VK_TRUE;
                    features->features.shaderUniformBufferArrayDynamicIndexing = VK_TRUE;
                    features->features.tessellationShader = VK_TRUE;
                    features->features.textureCompressionBC = VK_TRUE;
                    features->features.vertexPipelineStoresAndAtomics = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES: {
                    VkPhysicalDeviceImagelessFramebufferFeatures *features = (VkPhysicalDeviceImagelessFramebufferFeatures *)p;
                    features->imagelessFramebuffer = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES: {
                    VkPhysicalDevice16BitStorageFeatures *features = (VkPhysicalDevice16BitStorageFeatures *)p;
                    features->storageBuffer16BitAccess = VK_TRUE;
                    features->uniformAndStorageBuffer16BitAccess = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES: {
                    VkPhysicalDeviceMultiviewFeatures *features = (VkPhysicalDeviceMultiviewFeatures *)p;
                    features->multiview = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES: {
                    VkPhysicalDeviceDescriptorIndexingFeatures *features = (VkPhysicalDeviceDescriptorIndexingFeatures *)p;
                    features->shaderUniformTexelBufferArrayDynamicIndexing = VK_TRUE;
                    features->shaderStorageTexelBufferArrayDynamicIndexing = VK_TRUE;
                    features->shaderSampledImageArrayNonUniformIndexing = VK_TRUE;
                    features->shaderStorageBufferArrayNonUniformIndexing = VK_TRUE;
                    features->shaderUniformTexelBufferArrayNonUniformIndexing = VK_TRUE;
                    features->descriptorBindingSampledImageUpdateAfterBind = VK_TRUE;
                    features->descriptorBindingStorageImageUpdateAfterBind = VK_TRUE;
                    features->descriptorBindingStorageBufferUpdateAfterBind = VK_TRUE;
                    features->descriptorBindingUniformTexelBufferUpdateAfterBind = VK_TRUE;
                    features->descriptorBindingStorageTexelBufferUpdateAfterBind = VK_TRUE;
                    features->descriptorBindingUpdateUnusedWhilePending = VK_TRUE;
                    features->descriptorBindingPartiallyBound = VK_TRUE;
                    features->descriptorBindingVariableDescriptorCount = VK_TRUE;
                    features->runtimeDescriptorArray = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES: {
                    VkPhysicalDeviceHostQueryResetFeatures *features = (VkPhysicalDeviceHostQueryResetFeatures *)p;
                    features->hostQueryReset = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES: {
                    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures *features =
                        (VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures *)p;
                    features->shaderSubgroupExtendedTypes = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES: {
                    VkPhysicalDeviceUniformBufferStandardLayoutFeatures *features =
                        (VkPhysicalDeviceUniformBufferStandardLayoutFeatures *)p;
                    features->uniformBufferStandardLayout = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES: {
                    VkPhysicalDeviceShaderDrawParametersFeatures *features = (VkPhysicalDeviceShaderDrawParametersFeatures *)p;
                    features->shaderDrawParameters = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES: {
                    VkPhysicalDevice8BitStorageFeatures *features = (VkPhysicalDevice8BitStorageFeatures *)p;
                    features->storageBuffer8BitAccess = VK_TRUE;
                    features->storagePushConstant8 = VK_TRUE;
                    features->uniformAndStorageBuffer8BitAccess = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES: {
                    VkPhysicalDeviceShaderFloat16Int8Features *features = (VkPhysicalDeviceShaderFloat16Int8Features *)p;
                    features->shaderInt8 = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES: {
                    VkPhysicalDeviceSamplerYcbcrConversionFeatures *features = (VkPhysicalDeviceSamplerYcbcrConversionFeatures *)p;
                    features->samplerYcbcrConversion = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES: {
                    VkPhysicalDeviceVariablePointersFeatures *features = (VkPhysicalDeviceVariablePointersFeatures *)p;
                    features->variablePointersStorageBuffer = VK_TRUE;
                    features->variablePointers = VK_TRUE;
                } break;
#if defined(__APPLE__)
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR: {
                    VkPhysicalDevicePortabilitySubsetFeaturesKHR *features = (VkPhysicalDevicePortabilitySubsetFeaturesKHR *)p;
                    features->vertexAttributeAccessBeyondStride = VK_TRUE;
                    features->separateStencilMaskRef = VK_TRUE;
                    features->mutableComparisonSamplers = VK_TRUE;
                    features->multisampleArrayImage = VK_TRUE;
                    features->imageViewFormatSwizzle = VK_TRUE;
                    features->imageViewFormatReinterpretation = VK_TRUE;
                    features->events = VK_TRUE;
                    features->constantAlphaColorBlendFactors = VK_TRUE;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR: {
                    VkPhysicalDevicePortabilitySubsetPropertiesKHR *properties =
                        (VkPhysicalDevicePortabilitySubsetPropertiesKHR *)p;
                    properties->minVertexInputBindingStrideAlignment = 4;

                } break;
#endif
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES: {
                    VkPhysicalDeviceMaintenance3Properties *properties = (VkPhysicalDeviceMaintenance3Properties *)p;
                    properties->maxPerSetDescriptors = 700;
                    properties->maxMemoryAllocationSize = 2147483648;

                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES: {
                    VkPhysicalDeviceDepthStencilResolveProperties *properties = (VkPhysicalDeviceDepthStencilResolveProperties *)p;
                    properties->independentResolve = VK_TRUE;
                    properties->independentResolveNone = VK_TRUE;
                    properties->supportedDepthResolveModes = VK_RESOLVE_MODE_SAMPLE_ZERO_BIT;
                    properties->supportedStencilResolveModes = VK_RESOLVE_MODE_SAMPLE_ZERO_BIT;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT: {
                    VkPhysicalDeviceInlineUniformBlockPropertiesEXT *properties =
                        (VkPhysicalDeviceInlineUniformBlockPropertiesEXT *)p;
                    properties->maxInlineUniformBlockSize = 256;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES: {
                    VkPhysicalDeviceMultiviewProperties *properties = (VkPhysicalDeviceMultiviewProperties *)p;
                    properties->maxMultiviewInstanceIndex = 134217727;
                    properties->maxMultiviewViewCount = 6;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES: {
                    VkPhysicalDeviceDescriptorIndexingProperties *properties = (VkPhysicalDeviceDescriptorIndexingProperties *)p;
                    properties->maxUpdateAfterBindDescriptorsInAllPools = 1048576;
                    properties->maxPerStageDescriptorUpdateAfterBindSamplers = 16;
                    properties->maxPerStageDescriptorUpdateAfterBindUniformBuffers = 15;
                    properties->maxPerStageDescriptorUpdateAfterBindStorageBuffers = 31;
                    properties->maxPerStageDescriptorUpdateAfterBindSampledImages = 128;
                    properties->maxPerStageDescriptorUpdateAfterBindStorageImages = 8;
                    properties->maxPerStageDescriptorUpdateAfterBindInputAttachments = 128;
                    properties->maxPerStageUpdateAfterBindResources = 159;
                    properties->maxDescriptorSetUpdateAfterBindSamplers = 80;
                    properties->maxDescriptorSetUpdateAfterBindUniformBuffers = 90;
                    properties->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = 8;
                    properties->maxDescriptorSetUpdateAfterBindStorageBuffers = 155;
                    properties->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = 8;
                    properties->maxDescriptorSetUpdateAfterBindSampledImages = 640;
                    properties->maxDescriptorSetUpdateAfterBindStorageImages = 40;
                    properties->maxDescriptorSetUpdateAfterBindInputAttachments = 640;
                } break;
                case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2: {
                    VkPhysicalDeviceProperties2 *properties = (VkPhysicalDeviceProperties2 *)p;
                    properties->properties.limits.maxImageDimension1D = 16384;
                    properties->properties.limits.maxImageDimension2D = 16384;
                    properties->properties.limits.maxImageDimension3D = 2048;
                    properties->properties.limits.maxImageDimensionCube = 16384;
                    properties->properties.limits.maxImageArrayLayers = 2048;
                    properties->properties.limits.maxTexelBufferElements = 67108900;
                    properties->properties.limits.maxUniformBufferRange = 65536;
                    properties->properties.limits.maxStorageBufferRange = 134217728;
                    properties->properties.limits.maxPushConstantsSize = 128;
                    properties->properties.limits.maxMemoryAllocationCount = 4096;
                    properties->properties.limits.maxSamplerAllocationCount = 1024;
                    properties->properties.limits.bufferImageGranularity = 1024;
                    properties->properties.limits.sparseAddressSpaceSize = 1073741824;
                    properties->properties.limits.maxBoundDescriptorSets = 8;
                    properties->properties.limits.maxPerStageDescriptorSamplers = 16;
                    properties->properties.limits.maxPerStageDescriptorUniformBuffers = 15;
                    properties->properties.limits.maxPerStageDescriptorStorageBuffers = 16;
                    properties->properties.limits.maxPerStageDescriptorSampledImages = 128;
                    properties->properties.limits.maxPerStageDescriptorStorageImages = 8;
                    properties->properties.limits.maxPerStageDescriptorInputAttachments = 8;
                    properties->properties.limits.maxPerStageResources = 128;
                    properties->properties.limits.maxDescriptorSetSamplers = 80;
                    properties->properties.limits.maxDescriptorSetUniformBuffers = 90;
                    properties->properties.limits.maxDescriptorSetUniformBuffersDynamic = 8;
                    properties->properties.limits.maxDescriptorSetStorageBuffers = 155;
                    properties->properties.limits.maxDescriptorSetStorageBuffersDynamic = 8;
                    properties->properties.limits.maxDescriptorSetSampledImages = 256;
                    properties->properties.limits.maxDescriptorSetStorageImages = 40;
                    properties->properties.limits.maxDescriptorSetInputAttachments = 8;
                    properties->properties.limits.maxVertexInputAttributes = 28;
                    properties->properties.limits.maxVertexInputBindings = 28;
                    properties->properties.limits.maxVertexInputAttributeOffset = 2047;
                    properties->properties.limits.maxVertexInputBindingStride = 2048;
                    properties->properties.limits.maxVertexOutputComponents = 124;
                    properties->properties.limits.maxTessellationGenerationLevel = 64;
                    properties->properties.limits.maxTessellationPatchSize = 32;
                    properties->properties.limits.maxTessellationControlPerVertexInputComponents = 124;
                    properties->properties.limits.maxTessellationControlPerVertexOutputComponents = 124;
                    properties->properties.limits.maxTessellationControlPerPatchOutputComponents = 120;
                    properties->properties.limits.maxTessellationControlTotalOutputComponents = 2048;
                    properties->properties.limits.maxTessellationEvaluationInputComponents = 124;
                    properties->properties.limits.maxTessellationEvaluationOutputComponents = 124;
                    properties->properties.limits.maxFragmentInputComponents = 116;
                    properties->properties.limits.maxFragmentOutputAttachments = 8;
                    properties->properties.limits.maxFragmentDualSrcAttachments = 1;
                    properties->properties.limits.maxFragmentCombinedOutputResources = 8;
                    properties->properties.limits.maxComputeSharedMemorySize = 32768;
                    properties->properties.limits.maxComputeWorkGroupCount[0] = 65535;
                    properties->properties.limits.maxComputeWorkGroupCount[1] = 65535;
                    properties->properties.limits.maxComputeWorkGroupCount[2] = 65535;
                    properties->properties.limits.maxComputeWorkGroupInvocations = 1024;
                    properties->properties.limits.maxComputeWorkGroupSize[0] = 1024;
                    properties->properties.limits.maxComputeWorkGroupSize[1] = 1024;
                    properties->properties.limits.maxComputeWorkGroupSize[2] = 64;
                    properties->properties.limits.subPixelPrecisionBits = 4;
                    properties->properties.limits.subTexelPrecisionBits = 4;
                    properties->properties.limits.mipmapPrecisionBits = 4;
                    properties->properties.limits.maxDrawIndexedIndexValue = 4294967295u;
                    properties->properties.limits.maxDrawIndirectCount = 1073740000;
                    properties->properties.limits.maxSamplerLodBias = 14;
                    properties->properties.limits.maxSamplerAnisotropy = 16;
                    properties->properties.limits.maxViewports = 16;
                    properties->properties.limits.maxViewportDimensions[0] = 16384;
                    properties->properties.limits.maxViewportDimensions[1] = 16384;
                    properties->properties.limits.viewportBoundsRange[0] = -32768;
                    properties->properties.limits.viewportBoundsRange[1] = 32767;
                    properties->properties.limits.minMemoryMapAlignment = 64;
                    properties->properties.limits.minTexelBufferOffsetAlignment = 64;
                    properties->properties.limits.minUniformBufferOffsetAlignment = 256;
                    properties->properties.limits.minStorageBufferOffsetAlignment = 64;
                    properties->properties.limits.minTexelOffset = -8;
                    properties->properties.limits.maxTexelOffset = 7;
                    properties->properties.limits.minTexelGatherOffset = -8;
                    properties->properties.limits.maxTexelGatherOffset = 7;
                    properties->properties.limits.minInterpolationOffset = -0.5;
                    properties->properties.limits.maxInterpolationOffset = 0.4375;
                    properties->properties.limits.subPixelInterpolationOffsetBits = 4;
                    properties->properties.limits.maxFramebufferWidth = 16384;
                    properties->properties.limits.maxFramebufferHeight = 16384;
                    properties->properties.limits.maxFramebufferLayers = 1024;
                    properties->properties.limits.framebufferColorSampleCounts = 9;
                    properties->properties.limits.framebufferDepthSampleCounts = 9;
                    properties->properties.limits.framebufferStencilSampleCounts = 9;
                    properties->properties.limits.framebufferNoAttachmentsSampleCounts = 9;
                    properties->properties.limits.maxColorAttachments = 8;
                    properties->properties.limits.sampledImageColorSampleCounts = 9;
                    properties->properties.limits.sampledImageIntegerSampleCounts = 9;
                    properties->properties.limits.sampledImageDepthSampleCounts = 9;
                    properties->properties.limits.sampledImageStencilSampleCounts = 9;
                    properties->properties.limits.storageImageSampleCounts = 1;
                    properties->properties.limits.maxSampleMaskWords = 1;
                    properties->properties.limits.maxClipDistances = 8;
                    properties->properties.limits.maxCullDistances = 8;
                    properties->properties.limits.maxCombinedClipAndCullDistances = 8;
                    properties->properties.limits.discreteQueuePriorities = 2;
                    properties->properties.limits.pointSizeRange[0] = 1.0;
                    properties->properties.limits.pointSizeRange[1] = 64.0;
                    properties->properties.limits.lineWidthRange[0] = 1.0;
                    properties->properties.limits.lineWidthRange[1] = 1.0;
                    properties->properties.limits.pointSizeGranularity = 0.125;
                    properties->properties.limits.lineWidthGranularity = 0.5;
                } break;
                default:
                    break;
            }
            p = static_cast<VkStruct *>(p->pNext);
        }
    }
}

inline VkResult vpCreateDevice(VkPhysicalDevice physicalDevice, const VpProfileProperties *pProfile,
                               const VkDeviceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDevice *pDevice) {
    if (pProfile == nullptr) {
        return vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);
    } else if (strcmp(pProfile->profileName, VP_LUNARG_MINIMUM_REQUIREMENTS_NAME) == 0) {
        return vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);
    } else if (strcmp(pProfile->profileName, VP_KHR_1_2_ROADMAP_2022_NAME) == 0) {
        std::vector<const char *> extensions;
        for (int i = 0, n = countof(_VP_KHR_1_2_ROADMAP_2022_EXTENSIONS); i < n; ++i) {
            extensions.push_back(_VP_KHR_1_2_ROADMAP_2022_EXTENSIONS[i].extensionName);
        }

        for (uint32_t i = 0; i < pCreateInfo->enabledExtensionCount; ++i) {
            if (_vpCheckExtension(_VP_KHR_1_2_ROADMAP_2022_EXTENSIONS, countof(_VP_KHR_1_2_ROADMAP_2022_EXTENSIONS),
                                  pCreateInfo->ppEnabledExtensionNames[i])) {
                continue;
            }
            extensions.push_back(pCreateInfo->ppEnabledExtensionNames[i]);
        }

        void *pProfileNext = nullptr;

        VkPhysicalDeviceFeatures2 deviceFeatures2 = {};
        deviceFeatures2.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
        deviceFeatures2.pNext = nullptr;
        pProfileNext = &deviceFeatures2;

        VkPhysicalDeviceVulkan11Features deviceVulkan11Features = {};
        deviceVulkan11Features.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;
        deviceVulkan11Features.pNext = pProfileNext;
        pProfileNext = &deviceVulkan11Features;

        VkPhysicalDeviceVulkan12Features deviceVulkan12Features = {};
        deviceVulkan12Features.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;
        deviceVulkan12Features.pNext = pProfileNext;
        pProfileNext = &deviceVulkan12Features;

        VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR deviceShaderTerminateFeatures = {};
        deviceShaderTerminateFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR;
        deviceShaderTerminateFeatures.pNext = pProfileNext;
        pProfileNext = &deviceShaderTerminateFeatures;

        VkPhysicalDeviceSynchronization2FeaturesKHR deviceSynchrization2Features = {};
        deviceSynchrization2Features.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR;
        deviceSynchrization2Features.pNext = pProfileNext;
        pProfileNext = &deviceSynchrization2Features;

        VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR deviceZeroInitFeatures = {};
        deviceZeroInitFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR;
        deviceZeroInitFeatures.pNext = pProfileNext;
        pProfileNext = &deviceZeroInitFeatures;

        VkPhysicalDeviceImageRobustnessFeaturesEXT deviceImageRobustnessFeatures = {};
        deviceImageRobustnessFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT;
        deviceImageRobustnessFeatures.pNext = pProfileNext;
        pProfileNext = &deviceImageRobustnessFeatures;

        VkPhysicalDeviceInlineUniformBlockFeaturesEXT deviceInlineBlockFeatures = {};
        deviceInlineBlockFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
        deviceInlineBlockFeatures.pNext = pProfileNext;
        pProfileNext = &deviceInlineBlockFeatures;

        VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT devicePipelineCreationFeatures = {};
        devicePipelineCreationFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT;
        devicePipelineCreationFeatures.pNext = pProfileNext;
        pProfileNext = &devicePipelineCreationFeatures;

        VkPhysicalDevicePrivateDataFeaturesEXT devicePrivateDataFeatures = {};
        devicePrivateDataFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT;
        devicePrivateDataFeatures.pNext = pProfileNext;
        pProfileNext = &devicePrivateDataFeatures;

        VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT deviceShaderDemoteFeatures = {};
        deviceShaderDemoteFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT;
        deviceShaderDemoteFeatures.pNext = pProfileNext;
        pProfileNext = &deviceShaderDemoteFeatures;

        VkPhysicalDeviceSubgroupSizeControlFeaturesEXT deviceSubgroupSizeFeatures = {};
        deviceSubgroupSizeFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT;
        deviceSubgroupSizeFeatures.pNext = pProfileNext;
        pProfileNext = &deviceSubgroupSizeFeatures;

        VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT deviceTexelBufferFeatures = {};
        deviceTexelBufferFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT;
        deviceTexelBufferFeatures.pNext = pProfileNext;
        pProfileNext = &deviceTexelBufferFeatures;

        VkPhysicalDeviceExtendedDynamicState2FeaturesEXT deviceExtendedDynamicState2Features = {};
        deviceExtendedDynamicState2Features.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT;
        deviceExtendedDynamicState2Features.pNext = pProfileNext;
        pProfileNext = &deviceExtendedDynamicState2Features;

        vpGetProfileStructures(pProfile, pProfileNext);

        void *pRoot = const_cast<void *>(pCreateInfo->pNext);
        void *pNext = pRoot;

        if (pCreateInfo->pEnabledFeatures != nullptr) {
            deviceFeatures2.features = *pCreateInfo->pEnabledFeatures;
        }
        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2) == nullptr &&
            pCreateInfo->pEnabledFeatures == nullptr) {
            deviceFeatures2.pNext = pNext;
            pNext = &deviceFeatures2;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES) == nullptr) {
            deviceVulkan11Features.pNext = pNext;
            pNext = &deviceVulkan11Features;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES) == nullptr) {
            deviceVulkan12Features.pNext = pNext;
            pNext = &deviceVulkan12Features;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR) == nullptr) {
            deviceShaderTerminateFeatures.pNext = pNext;
            pNext = &deviceShaderTerminateFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR) == nullptr) {
            deviceSynchrization2Features.pNext = pNext;
            pNext = &deviceSynchrization2Features;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR) == nullptr) {
            deviceZeroInitFeatures.pNext = pNext;
            pNext = &deviceZeroInitFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT) == nullptr) {
            deviceImageRobustnessFeatures.pNext = pNext;
            pNext = &deviceImageRobustnessFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT) == nullptr) {
            deviceInlineBlockFeatures.pNext = pNext;
            pNext = &deviceInlineBlockFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT) == nullptr) {
            devicePipelineCreationFeatures.pNext = pNext;
            pNext = &devicePipelineCreationFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT) == nullptr) {
            devicePrivateDataFeatures.pNext = pNext;
            pNext = &devicePrivateDataFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT) == nullptr) {
            deviceShaderDemoteFeatures.pNext = pNext;
            pNext = &deviceShaderDemoteFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT) == nullptr) {
            deviceSubgroupSizeFeatures.pNext = pNext;
            pNext = &deviceSubgroupSizeFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT) == nullptr) {
            deviceTexelBufferFeatures.pNext = pNext;
            pNext = &deviceTexelBufferFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT) == nullptr) {
            deviceExtendedDynamicState2Features.pNext = pNext;
            pNext = &deviceExtendedDynamicState2Features;
        }

        VkDeviceCreateInfo deviceCreateInfo = {};
        deviceCreateInfo.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
        deviceCreateInfo.pNext = pNext;
        deviceCreateInfo.queueCreateInfoCount = pCreateInfo->queueCreateInfoCount;
        deviceCreateInfo.pQueueCreateInfos = pCreateInfo->pQueueCreateInfos;
        deviceCreateInfo.enabledExtensionCount = static_cast<uint32_t>(extensions.size());
        deviceCreateInfo.ppEnabledExtensionNames = static_cast<const char *const *>(extensions.data());
        deviceCreateInfo.pEnabledFeatures = pCreateInfo->pEnabledFeatures != nullptr ? &deviceFeatures2.features : nullptr;
        return vkCreateDevice(physicalDevice, &deviceCreateInfo, pAllocator, pDevice);
    } else if (strcmp(pProfile->profileName, VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME) == 0) {
        std::vector<const char *> extensions;
        for (int i = 0, n = countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_EXTENSIONS); i < n; ++i) {
            extensions.push_back(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_EXTENSIONS[i].extensionName);
        }

        for (uint32_t i = 0; i < pCreateInfo->enabledExtensionCount; ++i) {
            if (_vpCheckExtension(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_EXTENSIONS,
                                  countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_EXTENSIONS),
                                  pCreateInfo->ppEnabledExtensionNames[i])) {
                continue;
            }
            extensions.push_back(pCreateInfo->ppEnabledExtensionNames[i]);
        }

        void *pProfileNext = nullptr;

        VkPhysicalDeviceFeatures2 deviceFeatures2 = {};
        deviceFeatures2.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
        deviceFeatures2.pNext = nullptr;
        pProfileNext = &deviceFeatures2;

        VkPhysicalDeviceImagelessFramebufferFeatures deviceImagelessFeatures = {};
        deviceImagelessFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
        deviceImagelessFeatures.pNext = pProfileNext;
        pProfileNext = &deviceImagelessFeatures;

        VkPhysicalDevice16BitStorageFeatures device16BitFeatures = {};
        device16BitFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
        device16BitFeatures.pNext = pProfileNext;
        pProfileNext = &device16BitFeatures;

        VkPhysicalDeviceMultiviewFeatures deviceMultiviewFeatures = {};
        deviceMultiviewFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
        deviceMultiviewFeatures.pNext = pProfileNext;
        pProfileNext = &deviceMultiviewFeatures;

        VkPhysicalDeviceDescriptorIndexingFeatures deviceDescriptorInxedingFeatures = {};
        deviceDescriptorInxedingFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
        deviceDescriptorInxedingFeatures.pNext = pProfileNext;
        pProfileNext = &deviceDescriptorInxedingFeatures;

        VkPhysicalDeviceHostQueryResetFeatures deviceHostQueryResetFeatures = {};
        deviceHostQueryResetFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
        deviceHostQueryResetFeatures.pNext = pProfileNext;
        pProfileNext = &deviceHostQueryResetFeatures;

        VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures deviceShaderSubgroupFeatures = {};
        deviceShaderSubgroupFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
        deviceShaderSubgroupFeatures.pNext = pProfileNext;
        pProfileNext = &deviceShaderSubgroupFeatures;

        VkPhysicalDeviceUniformBufferStandardLayoutFeatures deviceUniformBufferFeatures = {};
        deviceUniformBufferFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
        deviceUniformBufferFeatures.pNext = pProfileNext;
        pProfileNext = &deviceUniformBufferFeatures;

        VkPhysicalDeviceShaderDrawParametersFeatures deviceShaderDrawFeatures = {};
        deviceShaderDrawFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
        deviceShaderDrawFeatures.pNext = pProfileNext;
        pProfileNext = &deviceShaderDrawFeatures;

        VkPhysicalDevice8BitStorageFeatures device8BitFeatures = {};
        device8BitFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
        device8BitFeatures.pNext = pProfileNext;
        pProfileNext = &device8BitFeatures;

        VkPhysicalDeviceShaderFloat16Int8Features deviceShaderFloatFeatures = {};
        deviceShaderFloatFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
        deviceShaderFloatFeatures.pNext = pProfileNext;
        pProfileNext = &deviceShaderFloatFeatures;

        VkPhysicalDeviceSamplerYcbcrConversionFeatures deviceSamplerYcbcrFeatures = {};
        deviceSamplerYcbcrFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
        deviceSamplerYcbcrFeatures.pNext = pProfileNext;
        pProfileNext = &deviceSamplerYcbcrFeatures;

        VkPhysicalDeviceVariablePointersFeatures deviceVariableFeatures = {};
        deviceVariableFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
        deviceVariableFeatures.pNext = pProfileNext;
        pProfileNext = &deviceVariableFeatures;

#if defined(__APPLE__)
        VkPhysicalDevicePortabilitySubsetFeaturesKHR devicePortabilitySubset = {};
        devicePortabilitySubset.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR;
        devicePortabilitySubset.pNext = pProfileNext;
        pProfileNext = &devicePortabilitySubset;
#endif

        vpGetProfileStructures(pProfile, pProfileNext);

        void *pRoot = const_cast<void *>(pCreateInfo->pNext);
        void *pNext = pRoot;

        if (pCreateInfo->pEnabledFeatures != nullptr) {
            deviceFeatures2.features = *pCreateInfo->pEnabledFeatures;
        }
        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2) == nullptr &&
            pCreateInfo->pEnabledFeatures == nullptr) {
            deviceFeatures2.pNext = pNext;
            pNext = &deviceFeatures2;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES) == nullptr) {
            deviceImagelessFeatures.pNext = pNext;
            pNext = &deviceImagelessFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES) == nullptr) {
            device16BitFeatures.pNext = pNext;
            pNext = &device16BitFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES) == nullptr) {
            deviceMultiviewFeatures.pNext = pNext;
            pNext = &deviceMultiviewFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES) == nullptr) {
            deviceDescriptorInxedingFeatures.pNext = pNext;
            pNext = &deviceDescriptorInxedingFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES) == nullptr) {
            deviceHostQueryResetFeatures.pNext = pNext;
            pNext = &deviceHostQueryResetFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES) == nullptr) {
            deviceShaderSubgroupFeatures.pNext = pNext;
            pNext = &deviceShaderSubgroupFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES) == nullptr) {
            deviceUniformBufferFeatures.pNext = pNext;
            pNext = &deviceUniformBufferFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES) == nullptr) {
            deviceShaderDrawFeatures.pNext = pNext;
            pNext = &deviceShaderDrawFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES) == nullptr) {
            device8BitFeatures.pNext = pNext;
            pNext = &device8BitFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES) == nullptr) {
            deviceShaderFloatFeatures.pNext = pNext;
            pNext = &deviceShaderFloatFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES) == nullptr) {
            deviceSamplerYcbcrFeatures.pNext = pNext;
            pNext = &deviceSamplerYcbcrFeatures;
        }

        if (_vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES) == nullptr) {
            deviceVariableFeatures.pNext = pNext;
            pNext = &deviceVariableFeatures;
        }

#if defined(__APPLE__)
        if (vpGetStructure(pRoot, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR) == nullptr) {
            pNext = &devicePortabilitySubset;
        }
#endif

        VkDeviceCreateInfo deviceCreateInfo = {};
        deviceCreateInfo.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
        deviceCreateInfo.pNext = pNext;
        deviceCreateInfo.queueCreateInfoCount = pCreateInfo->queueCreateInfoCount;
        deviceCreateInfo.pQueueCreateInfos = pCreateInfo->pQueueCreateInfos;
        deviceCreateInfo.enabledExtensionCount = static_cast<uint32_t>(extensions.size());
        deviceCreateInfo.ppEnabledExtensionNames = static_cast<const char *const *>(extensions.data());
        deviceCreateInfo.pEnabledFeatures = pCreateInfo->pEnabledFeatures != nullptr ? &deviceFeatures2.features : nullptr;
        return vkCreateDevice(physicalDevice, &deviceCreateInfo, pAllocator, pDevice);
    } else {
        return VK_ERROR_UNKNOWN;
    }
}

inline VkResult vpEnumerateDeviceProfiles(VkPhysicalDevice physicalDevice, const char *pLayerName, uint32_t *pPropertyCount,
                                          VpProfileProperties *pProperties) {
    VkResult result = VK_SUCCESS;

    uint32_t instanceExtensionCount;
    result = vkEnumerateInstanceExtensionProperties(pLayerName, &instanceExtensionCount, nullptr);
    std::vector<VkExtensionProperties> instanceExtensions(instanceExtensionCount);
    result = vkEnumerateInstanceExtensionProperties(pLayerName, &instanceExtensionCount, instanceExtensions.data());

    uint32_t deviceExtensionCount;
    result = vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, &deviceExtensionCount, nullptr);
    std::vector<VkExtensionProperties> deviceExtensions(deviceExtensionCount);
    result = vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, &deviceExtensionCount, deviceExtensions.data());

    uint32_t supportedProfileCount = 0;

    const VpProfileProperties supportedProfiles[] = {
        VpProfileProperties{VP_LUNARG_MINIMUM_REQUIREMENTS_NAME, VP_LUNARG_MINIMUM_REQUIREMENTS_SPEC_VERSION},
        VpProfileProperties{VP_KHR_1_2_ROADMAP_2022_NAME, VP_KHR_1_2_ROADMAP_2022_SPEC_VERSION},
        VpProfileProperties{VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME, VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_SPEC_VERSION}};

    for (int i = 0, n = countof(supportedProfiles); i < n; ++i) {
        VkBool32 supported = VK_FALSE;

        if (strcmp(supportedProfiles[i].profileName, VP_LUNARG_MINIMUM_REQUIREMENTS_NAME) == 0) {
            supported = VK_TRUE;
        } else if (strcmp(supportedProfiles[i].profileName, VP_KHR_1_2_ROADMAP_2022_NAME) == 0) {
            VkBool32 extensionSupported = VK_TRUE;
            for (std::size_t i = 0, n = countof(_VP_KHR_1_2_ROADMAP_2022_EXTENSIONS); i < n && extensionSupported; ++i) {
                const bool supportedInstanceExt = _vpCheckExtension(instanceExtensions.data(), instanceExtensions.size(),
                                                                    _VP_KHR_1_2_ROADMAP_2022_EXTENSIONS[i].extensionName);
                const bool supportedDeviceExt = _vpCheckExtension(deviceExtensions.data(), deviceExtensions.size(),
                                                                  _VP_KHR_1_2_ROADMAP_2022_EXTENSIONS[i].extensionName);

                if (!supportedInstanceExt && !supportedDeviceExt) {
                    extensionSupported = VK_FALSE;
                }
            }

            if (extensionSupported == VK_FALSE) {
                continue;
            }

            VkPhysicalDeviceExtendedDynamicState2FeaturesEXT deviceExtendedDynamicState = {};
            deviceExtendedDynamicState.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
            deviceExtendedDynamicState.pNext = nullptr;

            VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT deviceTexelBufferAlign = {};
            deviceTexelBufferAlign.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
            deviceTexelBufferAlign.pNext = &deviceExtendedDynamicState;

            VkPhysicalDeviceSubgroupSizeControlFeaturesEXT deviceSubgroupSize = {};
            deviceSubgroupSize.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
            deviceSubgroupSize.pNext = &deviceTexelBufferAlign;

            VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT deviceShaderDemote = {};
            deviceShaderDemote.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
            deviceShaderDemote.pNext = &deviceSubgroupSize;

            VkPhysicalDevicePrivateDataFeaturesEXT devicePrivateData = {};
            devicePrivateData.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
            devicePrivateData.pNext = &deviceShaderDemote;

            VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT devicePipelineCreation = {};
            devicePipelineCreation.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
            devicePipelineCreation.pNext = &devicePrivateData;

            VkPhysicalDeviceInlineUniformBlockFeaturesEXT deviceInlineUniformBlock = {};
            deviceInlineUniformBlock.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
            deviceInlineUniformBlock.pNext = &devicePipelineCreation;

            VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR deviceZeroInitialize = {};
            deviceZeroInitialize.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR;
            deviceZeroInitialize.pNext = &deviceInlineUniformBlock;

            VkPhysicalDeviceSynchronization2FeaturesKHR deviceSynchronization2 = {};
            deviceSynchronization2.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR;
            deviceSynchronization2.pNext = &deviceZeroInitialize;

            VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR deviceShaderTerminateInvocation = {};
            deviceShaderTerminateInvocation.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR;
            deviceShaderTerminateInvocation.pNext = &deviceSynchronization2;

            VkPhysicalDeviceVulkan12Features deviceFeatures12 = {};
            deviceFeatures12.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;
            deviceFeatures12.pNext = &deviceShaderTerminateInvocation;

            VkPhysicalDeviceVulkan11Features deviceFeatures11 = {};
            deviceFeatures11.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;
            deviceFeatures11.pNext = &deviceFeatures12;

            VkPhysicalDeviceFeatures2 deviceFeatures = {};
            deviceFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
            deviceFeatures.pNext = &deviceFeatures11;

            vkGetPhysicalDeviceFeatures2(physicalDevice, &deviceFeatures);

            VkPhysicalDeviceExtendedDynamicState2FeaturesEXT profileExtendedDynamicState = {};
            profileExtendedDynamicState.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
            profileExtendedDynamicState.pNext = nullptr;

            VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT profileTexelBufferAlign = {};
            profileTexelBufferAlign.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
            profileTexelBufferAlign.pNext = &profileExtendedDynamicState;

            VkPhysicalDeviceSubgroupSizeControlFeaturesEXT profileSubgroupSize = {};
            profileSubgroupSize.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
            profileSubgroupSize.pNext = &profileTexelBufferAlign;

            VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT profileShaderDemote = {};
            profileShaderDemote.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
            profileShaderDemote.pNext = &profileSubgroupSize;

            VkPhysicalDevicePrivateDataFeaturesEXT profilePrivateData = {};
            profilePrivateData.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
            profilePrivateData.pNext = &profileShaderDemote;

            VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT profilePipelineCreation = {};
            profilePipelineCreation.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
            profilePipelineCreation.pNext = &profilePrivateData;

            VkPhysicalDeviceInlineUniformBlockFeaturesEXT profileInlineUniformBlock = {};
            profileInlineUniformBlock.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
            profileInlineUniformBlock.pNext = &profilePipelineCreation;

            VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR profileZeroInitialize = {};
            profileZeroInitialize.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR;
            profileZeroInitialize.pNext = &profileInlineUniformBlock;

            VkPhysicalDeviceSynchronization2FeaturesKHR profileSynchronization2 = {};
            profileSynchronization2.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR;
            profileSynchronization2.pNext = &profileZeroInitialize;

            VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR profileShaderTerminateInvocation = {};
            profileShaderTerminateInvocation.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR;
            profileShaderTerminateInvocation.pNext = &profileSynchronization2;

            VkPhysicalDeviceVulkan12Features profileFeatures12 = {};
            profileFeatures12.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;
            profileFeatures12.pNext = &profileShaderTerminateInvocation;

            VkPhysicalDeviceVulkan11Features profileFeatures11 = {};
            profileFeatures11.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;
            profileFeatures11.pNext = &profileFeatures12;

            VkPhysicalDeviceFeatures2 profileFeatures = {};
            profileFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
            profileFeatures.pNext = &profileFeatures11;

            vpGetProfileStructures(&supportedProfiles[i], &profileFeatures);

            if (deviceFeatures.features.robustBufferAccess != profileFeatures.features.robustBufferAccess) {
                continue;
            } else if (deviceFeatures.features.imageCubeArray != profileFeatures.features.imageCubeArray) {
                continue;
            } else if (deviceFeatures.features.independentBlend != profileFeatures.features.independentBlend) {
                continue;
            } else if (deviceFeatures.features.sampleRateShading != profileFeatures.features.sampleRateShading) {
                continue;
            } else if (deviceFeatures.features.drawIndirectFirstInstance != profileFeatures.features.drawIndirectFirstInstance) {
                continue;
            } else if (deviceFeatures.features.depthBiasClamp != profileFeatures.features.depthBiasClamp) {
                continue;
            } else if (deviceFeatures.features.samplerAnisotropy != profileFeatures.features.samplerAnisotropy) {
                continue;
            } else if (deviceFeatures.features.occlusionQueryPrecise != profileFeatures.features.occlusionQueryPrecise) {
                continue;
            } else if (deviceFeatures.features.fragmentStoresAndAtomics != profileFeatures.features.fragmentStoresAndAtomics) {
                continue;
            } else if (deviceFeatures.features.shaderStorageImageExtendedFormats !=
                       profileFeatures.features.shaderStorageImageExtendedFormats) {
                continue;
            } else if (deviceFeatures.features.shaderStorageImageReadWithoutFormat !=
                       profileFeatures.features.shaderStorageImageReadWithoutFormat) {
                continue;
            } else if (deviceFeatures.features.shaderUniformBufferArrayDynamicIndexing !=
                       profileFeatures.features.shaderUniformBufferArrayDynamicIndexing) {
                continue;
            } else if (deviceFeatures.features.shaderSampledImageArrayDynamicIndexing !=
                       profileFeatures.features.shaderSampledImageArrayDynamicIndexing) {
                continue;
            } else if (deviceFeatures.features.shaderStorageBufferArrayDynamicIndexing !=
                       profileFeatures.features.shaderStorageBufferArrayDynamicIndexing) {
                continue;
            } else if (deviceFeatures.features.shaderStorageImageArrayDynamicIndexing !=
                       profileFeatures.features.shaderStorageImageArrayDynamicIndexing) {
                continue;
            }

            if (deviceFeatures11.multiview != profileFeatures11.multiview) {
                continue;
            } else if (deviceFeatures11.samplerYcbcrConversion != profileFeatures11.samplerYcbcrConversion) {
                continue;
            }

            if (deviceFeatures12.samplerMirrorClampToEdge != profileFeatures12.samplerMirrorClampToEdge) {
                continue;
            } else if (deviceFeatures12.shaderUniformTexelBufferArrayDynamicIndexing !=
                       profileFeatures12.shaderUniformTexelBufferArrayDynamicIndexing) {
                continue;
            } else if (deviceFeatures12.uniformBufferStandardLayout != profileFeatures12.uniformBufferStandardLayout) {
                continue;
            } else if (deviceFeatures12.shaderSubgroupExtendedTypes != profileFeatures12.shaderSubgroupExtendedTypes) {
                continue;
            } else if (deviceFeatures12.separateDepthStencilLayouts != profileFeatures12.separateDepthStencilLayouts) {
                continue;
            } else if (deviceFeatures12.hostQueryReset != profileFeatures12.hostQueryReset) {
                continue;
            } else if (deviceFeatures12.bufferDeviceAddress != profileFeatures12.bufferDeviceAddress) {
                continue;
            } else if (deviceFeatures12.vulkanMemoryModel != profileFeatures12.vulkanMemoryModel) {
                continue;
            } else if (deviceFeatures12.vulkanMemoryModelDeviceScope != profileFeatures12.vulkanMemoryModelDeviceScope) {
                continue;
            } else if (deviceFeatures12.vulkanMemoryModelAvailabilityVisibilityChains !=
                       profileFeatures12.vulkanMemoryModelAvailabilityVisibilityChains) {
                continue;
            } else if (deviceFeatures12.subgroupBroadcastDynamicId != profileFeatures12.subgroupBroadcastDynamicId) {
                continue;
            } else if (deviceFeatures12.imagelessFramebuffer != profileFeatures12.imagelessFramebuffer) {
                continue;
            }

            if (deviceShaderTerminateInvocation.shaderTerminateInvocation !=
                profileShaderTerminateInvocation.shaderTerminateInvocation) {
                continue;
            } else if (deviceSynchronization2.synchronization2 != profileSynchronization2.synchronization2) {
                continue;
            } else if (deviceZeroInitialize.shaderZeroInitializeWorkgroupMemory !=
                       profileZeroInitialize.shaderZeroInitializeWorkgroupMemory) {
                continue;
            } else if (deviceInlineUniformBlock.inlineUniformBlock != profileInlineUniformBlock.inlineUniformBlock) {
                continue;
            } else if (devicePipelineCreation.pipelineCreationCacheControl !=
                       profilePipelineCreation.pipelineCreationCacheControl) {
                continue;
            } else if (devicePrivateData.privateData != profilePrivateData.privateData) {
                continue;
            } else if (deviceShaderDemote.shaderDemoteToHelperInvocation != profileShaderDemote.shaderDemoteToHelperInvocation) {
                continue;
            } else if (deviceSubgroupSize.subgroupSizeControl != profileSubgroupSize.subgroupSizeControl) {
                continue;
            } else if (deviceSubgroupSize.computeFullSubgroups != profileSubgroupSize.computeFullSubgroups) {
                continue;
            } else if (deviceTexelBufferAlign.texelBufferAlignment != profileTexelBufferAlign.texelBufferAlignment) {
                continue;
            } else if (deviceExtendedDynamicState.extendedDynamicState2 != profileExtendedDynamicState.extendedDynamicState2) {
                continue;
            }

            VkPhysicalDeviceVulkan12Properties devicePropertiesVulkan12 = {};
            devicePropertiesVulkan12.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES;
            devicePropertiesVulkan12.pNext = nullptr;

            VkPhysicalDeviceVulkan11Properties devicePropertiesVulkan11 = {};
            devicePropertiesVulkan11.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES;
            devicePropertiesVulkan11.pNext = &devicePropertiesVulkan12;

            VkPhysicalDeviceProperties2 deviceProperties{};
            deviceProperties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
            deviceProperties.pNext = &devicePropertiesVulkan11;

            vkGetPhysicalDeviceProperties2(physicalDevice, &deviceProperties);

            VkPhysicalDeviceVulkan12Properties profilePropertiesVulkan12 = {};
            profilePropertiesVulkan12.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES;
            profilePropertiesVulkan12.pNext = nullptr;

            VkPhysicalDeviceVulkan11Properties profilePropertiesVulkan11 = {};
            profilePropertiesVulkan11.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES;
            profilePropertiesVulkan11.pNext = &profilePropertiesVulkan12;

            VkPhysicalDeviceProperties2 profileProperties{};
            profileProperties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
            profileProperties.pNext = &profilePropertiesVulkan11;

            vpGetProfileStructures(&supportedProfiles[i], &profileProperties);

            if (deviceProperties.properties.limits.maxImageDimension1D < profileProperties.properties.limits.maxImageDimension1D) {
                continue;
            } else if (deviceProperties.properties.limits.maxImageDimension2D <
                       profileProperties.properties.limits.maxImageDimension2D) {
                continue;
            } else if (deviceProperties.properties.limits.maxImageDimensionCube <
                       profileProperties.properties.limits.maxImageDimensionCube) {
                continue;
            } else if (deviceProperties.properties.limits.maxImageArrayLayers <
                       profileProperties.properties.limits.maxImageArrayLayers) {
                continue;
            } else if (deviceProperties.properties.limits.maxUniformBufferRange <
                       profileProperties.properties.limits.maxUniformBufferRange) {
                continue;
            } else if (deviceProperties.properties.limits.bufferImageGranularity >
                       profileProperties.properties.limits.bufferImageGranularity) {
                continue;
            } else if (deviceProperties.properties.limits.maxPerStageDescriptorSamplers <
                       profileProperties.properties.limits.maxPerStageDescriptorSamplers) {
                continue;
            } else if (deviceProperties.properties.limits.maxPerStageDescriptorUniformBuffers <
                       profileProperties.properties.limits.maxPerStageDescriptorUniformBuffers) {
                continue;
            } else if (deviceProperties.properties.limits.maxPerStageDescriptorStorageBuffers <
                       profileProperties.properties.limits.maxPerStageDescriptorStorageBuffers) {
                continue;
            } else if (deviceProperties.properties.limits.maxPerStageDescriptorSampledImages <
                       profileProperties.properties.limits.maxPerStageDescriptorSampledImages) {
                continue;
            } else if (deviceProperties.properties.limits.maxPerStageDescriptorStorageImages <
                       profileProperties.properties.limits.maxPerStageDescriptorStorageImages) {
                continue;
            } else if (deviceProperties.properties.limits.maxPerStageResources <
                       profileProperties.properties.limits.maxPerStageResources) {
                continue;
            } else if (deviceProperties.properties.limits.maxDescriptorSetSamplers <
                       profileProperties.properties.limits.maxDescriptorSetSamplers) {
                continue;
            } else if (deviceProperties.properties.limits.maxDescriptorSetUniformBuffers <
                       profileProperties.properties.limits.maxDescriptorSetUniformBuffers) {
                continue;
            } else if (deviceProperties.properties.limits.maxDescriptorSetStorageBuffers <
                       profileProperties.properties.limits.maxDescriptorSetStorageBuffers) {
                continue;
            } else if (deviceProperties.properties.limits.maxDescriptorSetSampledImages <
                       profileProperties.properties.limits.maxDescriptorSetSampledImages) {
                continue;
            } else if (deviceProperties.properties.limits.maxDescriptorSetStorageImages <
                       profileProperties.properties.limits.maxDescriptorSetStorageImages) {
                continue;
            } else if (deviceProperties.properties.limits.maxFragmentCombinedOutputResources <
                       profileProperties.properties.limits.maxFragmentCombinedOutputResources) {
                continue;
            } else if (deviceProperties.properties.limits.maxComputeWorkGroupInvocations <
                       profileProperties.properties.limits.maxComputeWorkGroupInvocations) {
                continue;
            } else if (deviceProperties.properties.limits.maxComputeWorkGroupSize[0] <
                           profileProperties.properties.limits.maxComputeWorkGroupSize[0] ||
                       deviceProperties.properties.limits.maxComputeWorkGroupSize[1] <
                           profileProperties.properties.limits.maxComputeWorkGroupSize[1] ||
                       deviceProperties.properties.limits.maxComputeWorkGroupSize[2] <
                           profileProperties.properties.limits.maxComputeWorkGroupSize[2]) {
                continue;
            } else if (deviceProperties.properties.limits.subTexelPrecisionBits <
                       profileProperties.properties.limits.subTexelPrecisionBits) {
                continue;
            } else if (deviceProperties.properties.limits.mipmapPrecisionBits <
                       profileProperties.properties.limits.mipmapPrecisionBits) {
                continue;
            } else if (deviceProperties.properties.limits.maxSamplerLodBias <
                       profileProperties.properties.limits.maxSamplerLodBias) {
                continue;
            } else if (deviceProperties.properties.limits.pointSizeGranularity >
                       profileProperties.properties.limits.pointSizeGranularity) {
                continue;
            } else if (deviceProperties.properties.limits.lineWidthGranularity >
                       profileProperties.properties.limits.lineWidthGranularity) {
                continue;
            }

            if (devicePropertiesVulkan11.subgroupSize < profilePropertiesVulkan11.subgroupSize) {
                continue;
            }

            if (devicePropertiesVulkan12.shaderSignedZeroInfNanPreserveFloat16 !=
                profilePropertiesVulkan12.shaderSignedZeroInfNanPreserveFloat16) {
                continue;
            } else if (devicePropertiesVulkan12.shaderSignedZeroInfNanPreserveFloat32 !=
                       profilePropertiesVulkan12.shaderSignedZeroInfNanPreserveFloat32) {
                continue;
            } else if (devicePropertiesVulkan12.maxPerStageDescriptorUpdateAfterBindInputAttachments <
                       profilePropertiesVulkan12.maxPerStageDescriptorUpdateAfterBindInputAttachments) {
                continue;
            }

            supported = VK_TRUE;
        } else if (strcmp(supportedProfiles[i].profileName, VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME) == 0) {
            VkBool32 extensionSupported = VK_TRUE;
            for (std::size_t i = 0, n = countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_EXTENSIONS); i < n && extensionSupported;
                 ++i) {
                const VkExtensionProperties &extensionProperties = _VP_KHR_1_1_DESKTOP_PORTABILITY_2022_EXTENSIONS[i];

                const bool supportedInstanceExt =
                    _vpCheckExtension(instanceExtensions.data(), instanceExtensions.size(), extensionProperties.extensionName);
                const bool supportedDeviceExt =
                    _vpCheckExtension(deviceExtensions.data(), deviceExtensions.size(), extensionProperties.extensionName);

                if (!supportedInstanceExt && !supportedDeviceExt) {
                    extensionSupported = VK_FALSE;
                }
            }

            if (extensionSupported == VK_FALSE) {
                continue;
            }

            VkBool32 formatsSupported = VK_TRUE;
            for (std::size_t i = 0, n = countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_FORMATS); i < n && formatsSupported; ++i) {
                const VpFormatProperties &requiredProps = _VP_KHR_1_1_DESKTOP_PORTABILITY_2022_FORMATS[i];

                VkFormatProperties2 deviceProps = {};
                deviceProps.sType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2;
                vkGetPhysicalDeviceFormatProperties2(physicalDevice, requiredProps.format, &deviceProps);

                if (!_vpCheckFormatProperty(&deviceProps, requiredProps)) {
                    formatsSupported = VK_FALSE;
                }
            }

            if (formatsSupported == VK_FALSE) {
                continue;
            }

            VkPhysicalDeviceMemoryProperties memoryProperties;
            vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);

            VkBool32 memorySupported = VK_TRUE;
            for (uint32_t i = 0, n = countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_MEMORY_TYPES); i < n && memorySupported; ++i) {
                const VkMemoryPropertyFlags memoryPropertyFlags = _VP_KHR_1_1_DESKTOP_PORTABILITY_2022_MEMORY_TYPES[i];

                if (!_vpCheckMemoryProperty(memoryProperties, _VP_KHR_1_1_DESKTOP_PORTABILITY_2022_MEMORY_TYPES[i])) {
                    memorySupported = VK_FALSE;
                }
            }

            if (memorySupported == VK_FALSE) {
                continue;
            }

            std::uint32_t queueFamilyCount = 0;
            vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, &queueFamilyCount, nullptr);
            std::vector<VkQueueFamilyProperties> queueFamily(queueFamilyCount);
            vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, &queueFamilyCount, queueFamily.data());

            VkBool32 queueSupported = VK_TRUE;
            for (uint32_t i = 0, n = countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_QUEUE_FAMILY_PROPERTIES); i < n && queueSupported;
                 ++i) {
                if (!_vpCheckQueueFamilyProperty(&queueFamily[0], queueFamilyCount,
                                                 _VP_KHR_1_1_DESKTOP_PORTABILITY_2022_QUEUE_FAMILY_PROPERTIES[i])) {
                    queueSupported = VK_FALSE;
                }
            }

            if (queueSupported == VK_FALSE) {
                continue;
            }

            void *pNext = nullptr;

#if defined(__APPLE__)
            VkPhysicalDevicePortabilitySubsetFeaturesKHR devicePortabilitySubset = {};
            devicePortabilitySubset.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR;
            devicePortabilitySubset.pNext = pNext;
            pNext = &devicePortabilitySubset;
#endif

            VkPhysicalDeviceSamplerYcbcrConversionFeatures deviceSamplerYcbcrConversionFeatures = {};
            deviceSamplerYcbcrConversionFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
            deviceSamplerYcbcrConversionFeatures.pNext = pNext;

            VkPhysicalDeviceShaderFloat16Int8Features deviceShaderFloat16Int8Features = {};
            deviceShaderFloat16Int8Features.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
            deviceShaderFloat16Int8Features.pNext = &deviceSamplerYcbcrConversionFeatures;

            VkPhysicalDevice8BitStorageFeatures device8BitStorageFeatures = {};
            device8BitStorageFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
            device8BitStorageFeatures.pNext = &deviceShaderFloat16Int8Features;

            VkPhysicalDeviceShaderDrawParametersFeatures deviceShaderDrawParametersFeatures = {};
            deviceShaderDrawParametersFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
            deviceShaderDrawParametersFeatures.pNext = &device8BitStorageFeatures;

            VkPhysicalDeviceImagelessFramebufferFeatures deviceImagelessFramebufferFeatures = {};
            deviceImagelessFramebufferFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
            deviceImagelessFramebufferFeatures.pNext = &deviceShaderDrawParametersFeatures;

            VkPhysicalDevice16BitStorageFeatures deviceStorage16bit = {};
            deviceStorage16bit.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
            deviceStorage16bit.pNext = &deviceImagelessFramebufferFeatures;

            VkPhysicalDeviceMultiviewFeatures deviceMultiviewFeatures = {};
            deviceMultiviewFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
            deviceMultiviewFeatures.pNext = &deviceStorage16bit;

            VkPhysicalDeviceDescriptorIndexingFeatures deviceDescriptorIndexingFeatures = {};
            deviceDescriptorIndexingFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
            deviceDescriptorIndexingFeatures.pNext = &deviceMultiviewFeatures;

            VkPhysicalDeviceHostQueryResetFeatures deviceQueryResetFeatures = {};
            deviceQueryResetFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
            deviceQueryResetFeatures.pNext = &deviceDescriptorIndexingFeatures;

            VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures deviceSubgroupExtendedTypesFeatures = {};
            deviceSubgroupExtendedTypesFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
            deviceSubgroupExtendedTypesFeatures.pNext = &deviceQueryResetFeatures;

            VkPhysicalDeviceUniformBufferStandardLayoutFeatures deviceUniformBufferStandardLayoutFeatures = {};
            deviceUniformBufferStandardLayoutFeatures.sType =
                VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
            deviceUniformBufferStandardLayoutFeatures.pNext = &deviceSubgroupExtendedTypesFeatures;

            VkPhysicalDeviceFeatures2 deviceFeatures = {};
            deviceFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
            deviceFeatures.pNext = &deviceUniformBufferStandardLayoutFeatures;

            vkGetPhysicalDeviceFeatures2(physicalDevice, &deviceFeatures);

#if defined(__APPLE__)
            VkPhysicalDevicePortabilitySubsetFeaturesKHR profilePortabilitySubset = {};
            profilePortabilitySubset.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR;
            profilePortabilitySubset.pNext = pNext;
            pNext = &profilePortabilitySubset;
#endif

            VkPhysicalDeviceSamplerYcbcrConversionFeatures profileSamplerYcbcrConversionFeatures = {};
            profileSamplerYcbcrConversionFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
            profileSamplerYcbcrConversionFeatures.pNext = pNext;

            VkPhysicalDeviceShaderFloat16Int8Features profileShaderFloat16Int8Features = {};
            profileShaderFloat16Int8Features.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
            profileShaderFloat16Int8Features.pNext = &profileSamplerYcbcrConversionFeatures;

            VkPhysicalDevice8BitStorageFeatures profile8BitStorageFeatures = {};
            profile8BitStorageFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
            profile8BitStorageFeatures.pNext = &profileShaderFloat16Int8Features;

            VkPhysicalDeviceShaderDrawParametersFeatures profileShaderDrawParametersFeatures = {};
            profileShaderDrawParametersFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
            profileShaderDrawParametersFeatures.pNext = &profile8BitStorageFeatures;

            VkPhysicalDeviceImagelessFramebufferFeatures profileImagelessFramebufferFeatures = {};
            profileImagelessFramebufferFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
            profileImagelessFramebufferFeatures.pNext = &profileShaderDrawParametersFeatures;

            VkPhysicalDevice16BitStorageFeatures profileStorage16bit = {};
            profileStorage16bit.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
            profileStorage16bit.pNext = &profileImagelessFramebufferFeatures;

            VkPhysicalDeviceMultiviewFeatures profileMultiviewFeatures = {};
            profileMultiviewFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
            profileMultiviewFeatures.pNext = &profileStorage16bit;

            VkPhysicalDeviceDescriptorIndexingFeatures profileDescriptorIndexingFeatures = {};
            profileDescriptorIndexingFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
            profileDescriptorIndexingFeatures.pNext = &profileMultiviewFeatures;

            VkPhysicalDeviceHostQueryResetFeatures profileQueryResetFeatures = {};
            profileQueryResetFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
            profileQueryResetFeatures.pNext = &profileDescriptorIndexingFeatures;

            VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures profileSubgroupExtendedTypesFeatures = {};
            profileSubgroupExtendedTypesFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
            profileSubgroupExtendedTypesFeatures.pNext = &profileQueryResetFeatures;

            VkPhysicalDeviceUniformBufferStandardLayoutFeatures profileUniformBufferStandardLayoutFeatures = {};
            profileUniformBufferStandardLayoutFeatures.sType =
                VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
            profileUniformBufferStandardLayoutFeatures.pNext = &profileSubgroupExtendedTypesFeatures;

            VkPhysicalDeviceFeatures2 profileFeatures = {};
            profileFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
            profileFeatures.pNext = &profileUniformBufferStandardLayoutFeatures;

            vpGetProfileStructures(&supportedProfiles[i], &profileFeatures);

            if (deviceFeatures.features.robustBufferAccess != profileFeatures.features.robustBufferAccess) {
                continue;
            } else if (deviceFeatures.features.fullDrawIndexUint32 != profileFeatures.features.fullDrawIndexUint32) {
                continue;
            } else if (deviceFeatures.features.imageCubeArray != profileFeatures.features.imageCubeArray) {
                continue;
            } else if (deviceFeatures.features.independentBlend != profileFeatures.features.independentBlend) {
                continue;
            } else if (deviceFeatures.features.inheritedQueries != profileFeatures.features.inheritedQueries) {
                continue;
            } else if (deviceFeatures.features.tessellationShader != profileFeatures.features.tessellationShader) {
                continue;
            } else if (deviceFeatures.features.sampleRateShading != profileFeatures.features.sampleRateShading) {
                continue;
            } else if (deviceFeatures.features.multiDrawIndirect != profileFeatures.features.multiDrawIndirect) {
                continue;
            } else if (deviceFeatures.features.drawIndirectFirstInstance != profileFeatures.features.drawIndirectFirstInstance) {
                continue;
            } else if (deviceFeatures.features.depthClamp != profileFeatures.features.depthClamp) {
                continue;
            } else if (deviceFeatures.features.depthBiasClamp != profileFeatures.features.depthBiasClamp) {
                continue;
            } else if (deviceFeatures.features.dualSrcBlend != profileFeatures.features.dualSrcBlend) {
                continue;
            } else if (deviceFeatures.features.fillModeNonSolid != profileFeatures.features.fillModeNonSolid) {
                continue;
            } else if (deviceFeatures.features.largePoints != profileFeatures.features.largePoints) {
                continue;
            } else if (deviceFeatures.features.multiViewport != profileFeatures.features.multiViewport) {
                continue;
            } else if (deviceFeatures.features.samplerAnisotropy != profileFeatures.features.samplerAnisotropy) {
                continue;
            } else if (deviceFeatures.features.sampleRateShading != profileFeatures.features.sampleRateShading) {
                continue;
            } else if (deviceFeatures.features.textureCompressionBC != profileFeatures.features.textureCompressionBC) {
                continue;
            } else if (deviceFeatures.features.occlusionQueryPrecise != profileFeatures.features.occlusionQueryPrecise) {
                continue;
            } else if (deviceFeatures.features.vertexPipelineStoresAndAtomics !=
                       profileFeatures.features.vertexPipelineStoresAndAtomics) {
                continue;
            } else if (deviceFeatures.features.fragmentStoresAndAtomics != profileFeatures.features.fragmentStoresAndAtomics) {
                continue;
            } else if (deviceFeatures.features.shaderTessellationAndGeometryPointSize !=
                       profileFeatures.features.shaderTessellationAndGeometryPointSize) {
                continue;
            } else if (deviceFeatures.features.shaderImageGatherExtended != profileFeatures.features.shaderImageGatherExtended) {
                continue;
            } else if (deviceFeatures.features.shaderSampledImageArrayDynamicIndexing !=
                       profileFeatures.features.shaderSampledImageArrayDynamicIndexing) {
                continue;
            } else if (deviceFeatures.features.shaderStorageBufferArrayDynamicIndexing !=
                       profileFeatures.features.shaderStorageBufferArrayDynamicIndexing) {
                continue;
            } else if (deviceFeatures.features.shaderStorageImageArrayDynamicIndexing !=
                       profileFeatures.features.shaderStorageImageArrayDynamicIndexing) {
                continue;
            } else if (deviceFeatures.features.shaderStorageImageExtendedFormats !=
                       profileFeatures.features.shaderStorageImageExtendedFormats) {
                continue;
            } else if (deviceFeatures.features.shaderStorageImageWriteWithoutFormat !=
                       profileFeatures.features.shaderStorageImageWriteWithoutFormat) {
                continue;
            } else if (deviceFeatures.features.shaderUniformBufferArrayDynamicIndexing !=
                       profileFeatures.features.shaderUniformBufferArrayDynamicIndexing) {
                continue;
            } else if (deviceFeatures.features.shaderClipDistance != profileFeatures.features.shaderClipDistance) {
                continue;
            } else if (deviceFeatures.features.tessellationShader != profileFeatures.features.tessellationShader) {
                continue;
            }

            if (deviceImagelessFramebufferFeatures.imagelessFramebuffer !=
                profileImagelessFramebufferFeatures.imagelessFramebuffer) {
                continue;
            } else if (deviceStorage16bit.storageBuffer16BitAccess != profileStorage16bit.storageBuffer16BitAccess) {
                continue;
            } else if (deviceStorage16bit.uniformAndStorageBuffer16BitAccess !=
                       profileStorage16bit.uniformAndStorageBuffer16BitAccess) {
                continue;
            } else if (deviceMultiviewFeatures.multiview != profileMultiviewFeatures.multiview) {
                continue;
            } else if (deviceDescriptorIndexingFeatures.shaderUniformTexelBufferArrayDynamicIndexing !=
                       profileDescriptorIndexingFeatures.shaderUniformTexelBufferArrayDynamicIndexing) {
                continue;
            } else if (deviceDescriptorIndexingFeatures.shaderStorageTexelBufferArrayDynamicIndexing !=
                       profileDescriptorIndexingFeatures.shaderStorageTexelBufferArrayDynamicIndexing) {
                continue;
            } else if (deviceDescriptorIndexingFeatures.shaderSampledImageArrayNonUniformIndexing !=
                       profileDescriptorIndexingFeatures.shaderSampledImageArrayNonUniformIndexing) {
                continue;
            } else if (deviceDescriptorIndexingFeatures.shaderStorageBufferArrayNonUniformIndexing !=
                       profileDescriptorIndexingFeatures.shaderStorageBufferArrayNonUniformIndexing) {
                continue;
            } else if (deviceDescriptorIndexingFeatures.shaderUniformTexelBufferArrayNonUniformIndexing !=
                       profileDescriptorIndexingFeatures.shaderUniformTexelBufferArrayNonUniformIndexing) {
                continue;
            } else if (deviceDescriptorIndexingFeatures.descriptorBindingSampledImageUpdateAfterBind !=
                       profileDescriptorIndexingFeatures.descriptorBindingSampledImageUpdateAfterBind) {
                continue;
            } else if (deviceDescriptorIndexingFeatures.descriptorBindingStorageImageUpdateAfterBind !=
                       profileDescriptorIndexingFeatures.descriptorBindingStorageImageUpdateAfterBind) {
                continue;
            } else if (deviceDescriptorIndexingFeatures.descriptorBindingStorageBufferUpdateAfterBind !=
                       profileDescriptorIndexingFeatures.descriptorBindingStorageBufferUpdateAfterBind) {
                continue;
            } else if (deviceDescriptorIndexingFeatures.descriptorBindingUniformTexelBufferUpdateAfterBind !=
                       profileDescriptorIndexingFeatures.descriptorBindingUniformTexelBufferUpdateAfterBind) {
                continue;
            } else if (deviceDescriptorIndexingFeatures.descriptorBindingStorageTexelBufferUpdateAfterBind !=
                       profileDescriptorIndexingFeatures.descriptorBindingStorageTexelBufferUpdateAfterBind) {
                continue;
            } else if (deviceDescriptorIndexingFeatures.descriptorBindingUpdateUnusedWhilePending !=
                       profileDescriptorIndexingFeatures.descriptorBindingUpdateUnusedWhilePending) {
                continue;
            } else if (deviceDescriptorIndexingFeatures.descriptorBindingPartiallyBound !=
                       profileDescriptorIndexingFeatures.descriptorBindingPartiallyBound) {
                continue;
            } else if (deviceDescriptorIndexingFeatures.descriptorBindingVariableDescriptorCount !=
                       profileDescriptorIndexingFeatures.descriptorBindingVariableDescriptorCount) {
                continue;
            } else if (deviceDescriptorIndexingFeatures.runtimeDescriptorArray !=
                       profileDescriptorIndexingFeatures.runtimeDescriptorArray) {
                continue;
            } else if (deviceQueryResetFeatures.hostQueryReset != profileQueryResetFeatures.hostQueryReset) {
                continue;
            } else if (deviceSubgroupExtendedTypesFeatures.shaderSubgroupExtendedTypes !=
                       profileSubgroupExtendedTypesFeatures.shaderSubgroupExtendedTypes) {
                continue;
            } else if (deviceUniformBufferStandardLayoutFeatures.uniformBufferStandardLayout !=
                       profileUniformBufferStandardLayoutFeatures.uniformBufferStandardLayout) {
                continue;
            }

            if (deviceShaderDrawParametersFeatures.shaderDrawParameters !=
                profileShaderDrawParametersFeatures.shaderDrawParameters) {
                continue;
            } else if (device8BitStorageFeatures.storageBuffer8BitAccess != profile8BitStorageFeatures.storageBuffer8BitAccess) {
                continue;
            } else if (device8BitStorageFeatures.storagePushConstant8 != profile8BitStorageFeatures.storagePushConstant8) {
                continue;
            } else if (device8BitStorageFeatures.uniformAndStorageBuffer8BitAccess !=
                       profile8BitStorageFeatures.uniformAndStorageBuffer8BitAccess) {
                continue;
            }

#if defined(__APPLE__)
            if (devicePortabilitySubset.vertexAttributeAccessBeyondStride !=
                profilePortabilitySubset.vertexAttributeAccessBeyondStride) {
                continue;
            } else if (devicePortabilitySubset.separateStencilMaskRef != profilePortabilitySubset.separateStencilMaskRef) {
                continue;
            } else if (devicePortabilitySubset.mutableComparisonSamplers != profilePortabilitySubset.mutableComparisonSamplers) {
                continue;
            } else if (devicePortabilitySubset.multisampleArrayImage != profilePortabilitySubset.multisampleArrayImage) {
                continue;
            } else if (devicePortabilitySubset.imageViewFormatSwizzle != profilePortabilitySubset.imageViewFormatSwizzle) {
                continue;
            } else if (devicePortabilitySubset.imageViewFormatReinterpretation !=
                       profilePortabilitySubset.imageViewFormatReinterpretation) {
                continue;
            } else if (devicePortabilitySubset.events != profilePortabilitySubset.events) {
                continue;
            } else if (devicePortabilitySubset.constantAlphaColorBlendFactors !=
                       profilePortabilitySubset.constantAlphaColorBlendFactors) {
                continue;
            }
#endif

            pNext = nullptr;

#if defined(__APPLE__)
            VkPhysicalDevicePortabilitySubsetPropertiesKHR devicePortabilitySubsetProperties = {};
            devicePortabilitySubsetProperties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR;
            devicePortabilitySubsetProperties.pNext = pNext;
            pNext = &devicePortabilitySubsetProperties;
#endif

            VkPhysicalDeviceMaintenance3Properties deviceMaintenance3Properties = {};
            deviceMaintenance3Properties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
            deviceMaintenance3Properties.pNext = pNext;

            VkPhysicalDeviceDepthStencilResolveProperties deviceDepthStencilResolveProperties = {};
            deviceDepthStencilResolveProperties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
            deviceDepthStencilResolveProperties.pNext = &deviceMaintenance3Properties;

            VkPhysicalDeviceInlineUniformBlockPropertiesEXT deviceInlineUniformBlockProperties = {};
            deviceInlineUniformBlockProperties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT;
            deviceInlineUniformBlockProperties.pNext = &deviceDepthStencilResolveProperties;

            VkPhysicalDeviceMultiviewProperties deviceMultiviewProperties = {};
            deviceMultiviewProperties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
            deviceMultiviewProperties.pNext = &deviceInlineUniformBlockProperties;

            VkPhysicalDeviceDescriptorIndexingProperties deviceDescriptorIndexingProperties = {};
            deviceDescriptorIndexingProperties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
            deviceDescriptorIndexingProperties.pNext = &deviceMultiviewProperties;

            VkPhysicalDeviceProperties2 deviceProperties{};
            deviceProperties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
            deviceProperties.pNext = &deviceDescriptorIndexingProperties;

            vkGetPhysicalDeviceProperties2(physicalDevice, &deviceProperties);

#if defined(__APPLE__)
            VkPhysicalDevicePortabilitySubsetPropertiesKHR profilePortabilitySubsetProperties = {};
            profilePortabilitySubsetProperties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR;
            profilePortabilitySubsetProperties.pNext = pNext;
            pNext = &profilePortabilitySubsetProperties;
#endif

            VkPhysicalDeviceMaintenance3Properties profileMaintenance3Properties = {};
            profileMaintenance3Properties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
            profileMaintenance3Properties.pNext = pNext;

            VkPhysicalDeviceDepthStencilResolveProperties profileDepthStencilResolveProperties = {};
            profileDepthStencilResolveProperties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
            profileDepthStencilResolveProperties.pNext = &profileMaintenance3Properties;

            VkPhysicalDeviceInlineUniformBlockPropertiesEXT profileInlineUniformBlockProperties = {};
            profileInlineUniformBlockProperties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT;
            profileInlineUniformBlockProperties.pNext = &profileDepthStencilResolveProperties;

            VkPhysicalDeviceMultiviewProperties profileMultiviewProperties = {};
            profileMultiviewProperties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
            profileMultiviewProperties.pNext = &profileInlineUniformBlockProperties;

            VkPhysicalDeviceDescriptorIndexingProperties profileDescriptorIndexingProperties = {};
            profileDescriptorIndexingProperties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
            profileDescriptorIndexingProperties.pNext = &profileMultiviewProperties;

            VkPhysicalDeviceProperties2 profileProperties{};
            profileProperties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
            profileProperties.pNext = &profileDescriptorIndexingProperties;

            vpGetProfileStructures(&supportedProfiles[i], &profileProperties);

            if (deviceProperties.properties.limits.maxImageDimension1D < profileProperties.properties.limits.maxImageDimension1D) {
                continue;
            } else if (deviceProperties.properties.limits.maxImageDimension2D <
                       profileProperties.properties.limits.maxImageDimension2D) {
                continue;
            } else if (deviceProperties.properties.limits.maxImageDimension3D <
                       profileProperties.properties.limits.maxImageDimension3D) {
                continue;
            } else if (deviceProperties.properties.limits.maxImageDimensionCube <
                       profileProperties.properties.limits.maxImageDimensionCube) {
                continue;
            } else if (deviceProperties.properties.limits.maxImageArrayLayers <
                       profileProperties.properties.limits.maxImageArrayLayers) {
                continue;
            } else if (deviceProperties.properties.limits.maxTexelBufferElements <
                       profileProperties.properties.limits.maxTexelBufferElements) {
                continue;
            } else if (deviceProperties.properties.limits.maxUniformBufferRange <
                       profileProperties.properties.limits.maxUniformBufferRange) {
                continue;
            } else if (deviceProperties.properties.limits.maxStorageBufferRange <
                       profileProperties.properties.limits.maxStorageBufferRange) {
                continue;
            } else if (deviceProperties.properties.limits.maxPushConstantsSize <
                       profileProperties.properties.limits.maxPushConstantsSize) {
                continue;
            } else if (deviceProperties.properties.limits.maxMemoryAllocationCount <
                       profileProperties.properties.limits.maxMemoryAllocationCount) {
                continue;
            } else if (deviceProperties.properties.limits.maxSamplerAllocationCount <
                       profileProperties.properties.limits.maxSamplerAllocationCount) {
                continue;
            } else if (deviceProperties.properties.limits.bufferImageGranularity >
                       profileProperties.properties.limits.bufferImageGranularity) {
                continue;
            } else if (deviceProperties.properties.limits.sparseAddressSpaceSize <
                       profileProperties.properties.limits.sparseAddressSpaceSize) {
                continue;
            } else if (deviceProperties.properties.limits.maxBoundDescriptorSets <
                       profileProperties.properties.limits.maxBoundDescriptorSets) {
                continue;
            } else if (deviceProperties.properties.limits.maxPerStageDescriptorSamplers <
                       profileProperties.properties.limits.maxPerStageDescriptorSamplers) {
                continue;
            } else if (deviceProperties.properties.limits.maxPerStageDescriptorUniformBuffers <
                       profileProperties.properties.limits.maxPerStageDescriptorUniformBuffers) {
                continue;
            } else if (deviceProperties.properties.limits.maxPerStageDescriptorStorageBuffers <
                       profileProperties.properties.limits.maxPerStageDescriptorStorageBuffers) {
                continue;
            } else if (deviceProperties.properties.limits.maxPerStageDescriptorSampledImages <
                       profileProperties.properties.limits.maxPerStageDescriptorSampledImages) {
                continue;
            } else if (deviceProperties.properties.limits.maxPerStageDescriptorStorageImages <
                       profileProperties.properties.limits.maxPerStageDescriptorStorageImages) {
                continue;
            } else if (deviceProperties.properties.limits.maxPerStageDescriptorInputAttachments <
                       profileProperties.properties.limits.maxPerStageDescriptorInputAttachments) {
                continue;
            } else if (deviceProperties.properties.limits.maxPerStageResources <
                       profileProperties.properties.limits.maxPerStageResources) {
                continue;
            } else if (deviceProperties.properties.limits.maxDescriptorSetSamplers <
                       profileProperties.properties.limits.maxDescriptorSetSamplers) {
                continue;
            } else if (deviceProperties.properties.limits.maxDescriptorSetUniformBuffers <
                       profileProperties.properties.limits.maxDescriptorSetUniformBuffers) {
                continue;
            } else if (deviceProperties.properties.limits.maxDescriptorSetUniformBuffersDynamic <
                       profileProperties.properties.limits.maxDescriptorSetUniformBuffersDynamic) {
                continue;
            } else if (deviceProperties.properties.limits.maxDescriptorSetStorageBuffers <
                       profileProperties.properties.limits.maxDescriptorSetStorageBuffers) {
                continue;
            } else if (deviceProperties.properties.limits.maxDescriptorSetStorageBuffersDynamic <
                       profileProperties.properties.limits.maxDescriptorSetStorageBuffersDynamic) {
                continue;
            } else if (deviceProperties.properties.limits.maxDescriptorSetSampledImages <
                       profileProperties.properties.limits.maxDescriptorSetSampledImages) {
                continue;
            } else if (deviceProperties.properties.limits.maxDescriptorSetStorageImages <
                       profileProperties.properties.limits.maxDescriptorSetStorageImages) {
                continue;
            } else if (deviceProperties.properties.limits.maxDescriptorSetInputAttachments <
                       profileProperties.properties.limits.maxDescriptorSetInputAttachments) {
                continue;
            } else if (deviceProperties.properties.limits.maxVertexInputAttributes <
                       profileProperties.properties.limits.maxVertexInputAttributes) {
                continue;
            } else if (deviceProperties.properties.limits.maxVertexInputBindings <
                       profileProperties.properties.limits.maxVertexInputBindings) {
                continue;
            } else if (deviceProperties.properties.limits.maxVertexInputAttributeOffset <
                       profileProperties.properties.limits.maxVertexInputAttributeOffset) {
                continue;
            } else if (deviceProperties.properties.limits.maxVertexInputBindingStride <
                       profileProperties.properties.limits.maxVertexInputBindingStride) {
                continue;
            } else if (deviceProperties.properties.limits.maxVertexOutputComponents <
                       profileProperties.properties.limits.maxVertexOutputComponents) {
                continue;
            } else if (deviceProperties.properties.limits.maxTessellationGenerationLevel <
                       profileProperties.properties.limits.maxTessellationGenerationLevel) {
                continue;
            } else if (deviceProperties.properties.limits.maxTessellationPatchSize <
                       profileProperties.properties.limits.maxTessellationPatchSize) {
                continue;
            } else if (deviceProperties.properties.limits.maxTessellationControlPerVertexInputComponents <
                       profileProperties.properties.limits.maxTessellationControlPerVertexInputComponents) {
                continue;
            } else if (deviceProperties.properties.limits.maxTessellationControlPerVertexOutputComponents <
                       profileProperties.properties.limits.maxTessellationControlPerVertexOutputComponents) {
                continue;
            } else if (deviceProperties.properties.limits.maxTessellationControlPerPatchOutputComponents <
                       profileProperties.properties.limits.maxTessellationControlPerPatchOutputComponents) {
                continue;
            } else if (deviceProperties.properties.limits.maxTessellationControlTotalOutputComponents <
                       profileProperties.properties.limits.maxTessellationControlTotalOutputComponents) {
                continue;
            } else if (deviceProperties.properties.limits.maxTessellationEvaluationInputComponents <
                       profileProperties.properties.limits.maxTessellationEvaluationInputComponents) {
                continue;
            } else if (deviceProperties.properties.limits.maxTessellationEvaluationOutputComponents <
                       profileProperties.properties.limits.maxTessellationEvaluationOutputComponents) {
                continue;
            } else if (deviceProperties.properties.limits.maxFragmentInputComponents <
                       profileProperties.properties.limits.maxFragmentInputComponents) {
                continue;
            } else if (deviceProperties.properties.limits.maxFragmentOutputAttachments <
                       profileProperties.properties.limits.maxFragmentOutputAttachments) {
                continue;
            } else if (deviceProperties.properties.limits.maxFragmentDualSrcAttachments <
                       profileProperties.properties.limits.maxFragmentDualSrcAttachments) {
                continue;
            } else if (deviceProperties.properties.limits.maxFragmentCombinedOutputResources <
                       profileProperties.properties.limits.maxFragmentCombinedOutputResources) {
                continue;
            } else if (deviceProperties.properties.limits.maxComputeSharedMemorySize <
                       profileProperties.properties.limits.maxComputeSharedMemorySize) {
                continue;
            } else if (deviceProperties.properties.limits.maxComputeWorkGroupCount[0] <
                       profileProperties.properties.limits.maxComputeWorkGroupCount[0]) {
                continue;
            } else if (deviceProperties.properties.limits.maxComputeWorkGroupCount[1] <
                       profileProperties.properties.limits.maxComputeWorkGroupCount[1]) {
                continue;
            } else if (deviceProperties.properties.limits.maxComputeWorkGroupCount[2] <
                       profileProperties.properties.limits.maxComputeWorkGroupCount[2]) {
                continue;
            } else if (deviceProperties.properties.limits.maxComputeWorkGroupInvocations <
                       profileProperties.properties.limits.maxComputeWorkGroupInvocations) {
                continue;
            } else if (deviceProperties.properties.limits.maxComputeWorkGroupSize[0] <
                       profileProperties.properties.limits.maxComputeWorkGroupSize[0]) {
                continue;
            } else if (deviceProperties.properties.limits.maxComputeWorkGroupSize[1] <
                       profileProperties.properties.limits.maxComputeWorkGroupSize[1]) {
                continue;
            } else if (deviceProperties.properties.limits.maxComputeWorkGroupSize[2] <
                       profileProperties.properties.limits.maxComputeWorkGroupSize[2]) {
                continue;
            } else if (deviceProperties.properties.limits.subPixelPrecisionBits <
                       profileProperties.properties.limits.subPixelPrecisionBits) {
                continue;
            } else if (deviceProperties.properties.limits.subTexelPrecisionBits <
                       profileProperties.properties.limits.subTexelPrecisionBits) {
                continue;
            } else if (deviceProperties.properties.limits.mipmapPrecisionBits <
                       profileProperties.properties.limits.mipmapPrecisionBits) {
                continue;
            } else if (deviceProperties.properties.limits.maxDrawIndexedIndexValue <
                       profileProperties.properties.limits.maxDrawIndexedIndexValue) {
                continue;
            } else if (deviceProperties.properties.limits.maxDrawIndirectCount <
                       profileProperties.properties.limits.maxDrawIndirectCount) {
                continue;
            } else if (deviceProperties.properties.limits.maxSamplerLodBias <
                       profileProperties.properties.limits.maxSamplerLodBias) {
                continue;
            } else if (deviceProperties.properties.limits.maxSamplerAnisotropy <
                       profileProperties.properties.limits.maxSamplerAnisotropy) {
                continue;
            } else if (deviceProperties.properties.limits.maxViewports < profileProperties.properties.limits.maxViewports) {
                continue;
            } else if (deviceProperties.properties.limits.maxViewportDimensions[0] <
                       profileProperties.properties.limits.maxViewportDimensions[0]) {
                continue;
            } else if (deviceProperties.properties.limits.maxViewportDimensions[1] <
                       profileProperties.properties.limits.maxViewportDimensions[1]) {
                continue;
            } else if (deviceProperties.properties.limits.viewportBoundsRange[0] >
                       profileProperties.properties.limits.viewportBoundsRange[0]) {
                continue;
            } else if (deviceProperties.properties.limits.viewportBoundsRange[1] <
                       profileProperties.properties.limits.viewportBoundsRange[1]) {
                continue;
            } else if (deviceProperties.properties.limits.minMemoryMapAlignment <
                       profileProperties.properties.limits.minMemoryMapAlignment) {
                continue;
            } else if (deviceProperties.properties.limits.minTexelBufferOffsetAlignment >
                       profileProperties.properties.limits.minTexelBufferOffsetAlignment) {
                continue;
            } else if (deviceProperties.properties.limits.minUniformBufferOffsetAlignment >
                       profileProperties.properties.limits.minUniformBufferOffsetAlignment) {
                continue;
            } else if (deviceProperties.properties.limits.minStorageBufferOffsetAlignment >
                       profileProperties.properties.limits.minStorageBufferOffsetAlignment) {
                continue;
            } else if (deviceProperties.properties.limits.minTexelOffset > profileProperties.properties.limits.minTexelOffset) {
                continue;
            } else if (deviceProperties.properties.limits.maxTexelOffset < profileProperties.properties.limits.maxTexelOffset) {
                continue;
            } else if (deviceProperties.properties.limits.minTexelGatherOffset >
                       profileProperties.properties.limits.minTexelGatherOffset) {
                continue;
            } else if (deviceProperties.properties.limits.maxTexelGatherOffset <
                       profileProperties.properties.limits.maxTexelGatherOffset) {
                continue;
            } else if (deviceProperties.properties.limits.minInterpolationOffset >
                       profileProperties.properties.limits.minInterpolationOffset) {
                continue;
            } else if (deviceProperties.properties.limits.maxInterpolationOffset <
                       profileProperties.properties.limits.maxInterpolationOffset) {
                continue;
            } else if (deviceProperties.properties.limits.subPixelInterpolationOffsetBits <
                       profileProperties.properties.limits.subPixelInterpolationOffsetBits) {
                continue;
            } else if (deviceProperties.properties.limits.maxFramebufferWidth <
                       profileProperties.properties.limits.maxFramebufferWidth) {
                continue;
            } else if (deviceProperties.properties.limits.maxFramebufferHeight <
                       profileProperties.properties.limits.maxFramebufferHeight) {
                continue;
            } else if (deviceProperties.properties.limits.maxFramebufferLayers <
                       profileProperties.properties.limits.maxFramebufferLayers) {
                continue;
            } else if (deviceProperties.properties.limits.framebufferColorSampleCounts <
                       profileProperties.properties.limits.framebufferColorSampleCounts) {
                continue;
            } else if (deviceProperties.properties.limits.framebufferDepthSampleCounts <
                       profileProperties.properties.limits.framebufferDepthSampleCounts) {
                continue;
            } else if (deviceProperties.properties.limits.framebufferStencilSampleCounts <
                       profileProperties.properties.limits.framebufferStencilSampleCounts) {
                continue;
            } else if (deviceProperties.properties.limits.framebufferNoAttachmentsSampleCounts <
                       profileProperties.properties.limits.framebufferNoAttachmentsSampleCounts) {
                continue;
            } else if (deviceProperties.properties.limits.maxColorAttachments <
                       profileProperties.properties.limits.maxColorAttachments) {
                continue;
            } else if (deviceProperties.properties.limits.sampledImageColorSampleCounts <
                       profileProperties.properties.limits.sampledImageColorSampleCounts) {
                continue;
            } else if (deviceProperties.properties.limits.sampledImageIntegerSampleCounts <
                       profileProperties.properties.limits.sampledImageIntegerSampleCounts) {
                continue;
            } else if (deviceProperties.properties.limits.sampledImageDepthSampleCounts <
                       profileProperties.properties.limits.sampledImageDepthSampleCounts) {
                continue;
            } else if (deviceProperties.properties.limits.sampledImageStencilSampleCounts <
                       profileProperties.properties.limits.sampledImageStencilSampleCounts) {
                continue;
            } else if (deviceProperties.properties.limits.storageImageSampleCounts <
                       profileProperties.properties.limits.storageImageSampleCounts) {
                continue;
            } else if (deviceProperties.properties.limits.maxSampleMaskWords >
                       profileProperties.properties.limits.maxSampleMaskWords) {
                continue;
            } else if (deviceProperties.properties.limits.maxClipDistances < profileProperties.properties.limits.maxClipDistances) {
                continue;
            } else if (deviceProperties.properties.limits.maxCullDistances < profileProperties.properties.limits.maxCullDistances) {
                continue;
            } else if (deviceProperties.properties.limits.maxCombinedClipAndCullDistances <
                       profileProperties.properties.limits.maxCombinedClipAndCullDistances) {
                continue;
            } else if (deviceProperties.properties.limits.discreteQueuePriorities <
                       profileProperties.properties.limits.discreteQueuePriorities) {
                continue;
            } else if (deviceProperties.properties.limits.pointSizeRange[0] >
                       profileProperties.properties.limits.pointSizeRange[0]) {
                continue;
            } else if (deviceProperties.properties.limits.pointSizeRange[1] <
                       profileProperties.properties.limits.pointSizeRange[1]) {
                continue;
            } else if (deviceProperties.properties.limits.lineWidthRange[0] >
                       profileProperties.properties.limits.lineWidthRange[0]) {
                continue;
            } else if (deviceProperties.properties.limits.lineWidthRange[1] <
                       profileProperties.properties.limits.lineWidthRange[1]) {
                continue;
            } else if (deviceProperties.properties.limits.pointSizeGranularity >
                       profileProperties.properties.limits.pointSizeGranularity) {
                continue;
            } else if (deviceProperties.properties.limits.lineWidthGranularity >
                       profileProperties.properties.limits.lineWidthGranularity) {
                continue;
            }

            if (deviceDescriptorIndexingProperties.maxUpdateAfterBindDescriptorsInAllPools <
                profileDescriptorIndexingProperties.maxUpdateAfterBindDescriptorsInAllPools) {
                continue;
            } else if (deviceDescriptorIndexingProperties.maxPerStageDescriptorUpdateAfterBindSamplers <
                       profileDescriptorIndexingProperties.maxPerStageDescriptorUpdateAfterBindSamplers) {
                continue;
            } else if (deviceDescriptorIndexingProperties.maxPerStageDescriptorUpdateAfterBindUniformBuffers <
                       profileDescriptorIndexingProperties.maxPerStageDescriptorUpdateAfterBindUniformBuffers) {
                continue;
            } else if (deviceDescriptorIndexingProperties.maxPerStageDescriptorUpdateAfterBindStorageBuffers <
                       profileDescriptorIndexingProperties.maxPerStageDescriptorUpdateAfterBindStorageBuffers) {
                continue;
            } else if (deviceDescriptorIndexingProperties.maxPerStageDescriptorUpdateAfterBindSampledImages <
                       profileDescriptorIndexingProperties.maxPerStageDescriptorUpdateAfterBindSampledImages) {
                continue;
            } else if (deviceDescriptorIndexingProperties.maxPerStageDescriptorUpdateAfterBindStorageImages <
                       profileDescriptorIndexingProperties.maxPerStageDescriptorUpdateAfterBindStorageImages) {
                continue;
            } else if (deviceDescriptorIndexingProperties.maxPerStageDescriptorUpdateAfterBindInputAttachments <
                       profileDescriptorIndexingProperties.maxPerStageDescriptorUpdateAfterBindInputAttachments) {
                continue;
            } else if (deviceDescriptorIndexingProperties.maxPerStageUpdateAfterBindResources <
                       profileDescriptorIndexingProperties.maxPerStageUpdateAfterBindResources) {
                continue;
            } else if (deviceDescriptorIndexingProperties.maxDescriptorSetUpdateAfterBindSamplers <
                       profileDescriptorIndexingProperties.maxDescriptorSetUpdateAfterBindSamplers) {
                continue;
            } else if (deviceDescriptorIndexingProperties.maxDescriptorSetUpdateAfterBindUniformBuffers <
                       profileDescriptorIndexingProperties.maxDescriptorSetUpdateAfterBindUniformBuffers) {
                continue;
            } else if (deviceDescriptorIndexingProperties.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic <
                       profileDescriptorIndexingProperties.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic) {
                continue;
            } else if (deviceDescriptorIndexingProperties.maxDescriptorSetUpdateAfterBindStorageBuffers <
                       profileDescriptorIndexingProperties.maxDescriptorSetUpdateAfterBindStorageBuffers) {
                continue;
            } else if (deviceDescriptorIndexingProperties.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic <
                       profileDescriptorIndexingProperties.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic) {
                continue;
            } else if (deviceDescriptorIndexingProperties.maxDescriptorSetUpdateAfterBindSampledImages <
                       profileDescriptorIndexingProperties.maxDescriptorSetUpdateAfterBindSampledImages) {
                continue;
            } else if (deviceDescriptorIndexingProperties.maxDescriptorSetUpdateAfterBindStorageImages <
                       profileDescriptorIndexingProperties.maxDescriptorSetUpdateAfterBindStorageImages) {
                continue;
            } else if (deviceDescriptorIndexingProperties.maxDescriptorSetUpdateAfterBindInputAttachments <
                       profileDescriptorIndexingProperties.maxDescriptorSetUpdateAfterBindInputAttachments) {
                continue;
            }

            if (deviceMultiviewProperties.maxMultiviewInstanceIndex < profileMultiviewProperties.maxMultiviewInstanceIndex) {
                continue;
            } else if (deviceMultiviewProperties.maxMultiviewViewCount < profileMultiviewProperties.maxMultiviewViewCount) {
                continue;
            }

            if (deviceInlineUniformBlockProperties.maxInlineUniformBlockSize <
                profileInlineUniformBlockProperties.maxInlineUniformBlockSize) {
                continue;
            }

            if (deviceDepthStencilResolveProperties.independentResolve != profileDepthStencilResolveProperties.independentResolve) {
                continue;
            } else if (deviceDepthStencilResolveProperties.independentResolveNone !=
                       profileDepthStencilResolveProperties.independentResolveNone) {
                continue;
            } else if ((deviceDepthStencilResolveProperties.supportedDepthResolveModes &
                        profileDepthStencilResolveProperties.supportedDepthResolveModes) !=
                       profileDepthStencilResolveProperties.supportedDepthResolveModes) {
                continue;
            } else if ((deviceDepthStencilResolveProperties.supportedStencilResolveModes &
                        profileDepthStencilResolveProperties.supportedStencilResolveModes) !=
                       profileDepthStencilResolveProperties.supportedStencilResolveModes) {
                continue;
            }

            if (deviceMaintenance3Properties.maxPerSetDescriptors < profileMaintenance3Properties.maxPerSetDescriptors) {
                continue;
            } else if (deviceMaintenance3Properties.maxMemoryAllocationSize <
                       profileMaintenance3Properties.maxMemoryAllocationSize) {
                continue;
            }
#if defined(__APPLE__)
            else if (devicePortabilitySubsetProperties.minVertexInputBindingStrideAlignment <
                     profilePortabilitySubsetProperties.minVertexInputBindingStrideAlignment) {
                continue;
            }
#endif

            supported = VK_TRUE;
        }

        if (supported == VK_TRUE) {
            if (pProperties != nullptr && supportedProfileCount < *pPropertyCount) {
                pProperties[supportedProfileCount] = supportedProfiles[i];
            }
            supportedProfileCount++;
        }
    }

    if (pProperties == nullptr) {
        *pPropertyCount = supportedProfileCount;
    }

    return result;
}

inline void vpGetProfileExtensionProperties(const VpProfileProperties *pProfile, uint32_t *pPropertyCount,
                                            VkExtensionProperties *pProperties) {
    if (pProperties == nullptr) {
        if (strcmp(pProfile->profileName, VP_LUNARG_MINIMUM_REQUIREMENTS_NAME) == 0) {
            *pPropertyCount = 0;
        } else if (strcmp(pProfile->profileName, VP_KHR_1_2_ROADMAP_2022_NAME) == 0) {
            *pPropertyCount = countof(_VP_KHR_1_2_ROADMAP_2022_EXTENSIONS);
        } else if (strcmp(pProfile->profileName, VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME) == 0) {
            *pPropertyCount = countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_EXTENSIONS);
        }
        return;
    }

    if (strcmp(pProfile->profileName, VP_LUNARG_MINIMUM_REQUIREMENTS_NAME) == 0) {
    } else if (strcmp(pProfile->profileName, VP_KHR_1_2_ROADMAP_2022_NAME) == 0) {
        for (std::size_t i = 0, n = std::min<std::size_t>(countof(_VP_KHR_1_2_ROADMAP_2022_EXTENSIONS), *pPropertyCount); i < n;
             ++i) {
            pProperties[i] = _VP_KHR_1_2_ROADMAP_2022_EXTENSIONS[i];
        }
    } else if (strcmp(pProfile->profileName, VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME) == 0) {
        for (std::size_t i = 0,
                         n = std::min<std::size_t>(countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_EXTENSIONS), *pPropertyCount);
             i < n; ++i) {
            pProperties[i] = _VP_KHR_1_1_DESKTOP_PORTABILITY_2022_EXTENSIONS[i];
        }
    }
}

inline void vpGetProfileStructureProperties(const VpProfileProperties *pProfile, uint32_t *pPropertyCount,
                                            VpStructureProperties *pProperties) {
    if (pProperties == nullptr) {
        if (strcmp(pProfile->profileName, VP_LUNARG_MINIMUM_REQUIREMENTS_NAME) == 0) {
            *pPropertyCount = 0;
        } else if (strcmp(pProfile->profileName, VP_KHR_1_2_ROADMAP_2022_NAME) == 0) {
            *pPropertyCount = countof(_VP_KHR_1_2_ROADMAP_2022_STRUCTURE_PROPERTIES);
        } else if (strcmp(pProfile->profileName, VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME) == 0) {
            *pPropertyCount = countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_STRUCTURE_PROPERTIES);
        }
        return;
    }

    if (strcmp(pProfile->profileName, VP_KHR_1_2_ROADMAP_2022_NAME) == 0) {
        std::size_t n = std::min<std::size_t>(countof(_VP_KHR_1_2_ROADMAP_2022_STRUCTURE_PROPERTIES), *pPropertyCount);
        for (std::size_t i = 0; i < n; ++i) {
            pProperties[i] = _VP_KHR_1_2_ROADMAP_2022_STRUCTURE_PROPERTIES[i];
        }
    } else if (strcmp(pProfile->profileName, VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME) == 0) {
        std::size_t n = std::min<std::size_t>(countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_STRUCTURE_PROPERTIES), *pPropertyCount);
        for (std::size_t i = 0; i < n; ++i) {
            pProperties[i] = _VP_KHR_1_1_DESKTOP_PORTABILITY_2022_STRUCTURE_PROPERTIES[i];
        }
    }
}

inline void vpGetProfileFormats(const VpProfileProperties *pProfile, uint32_t *pFormatCount, VkFormat *pFormat) {
    if (pFormat == nullptr) {
        if (strcmp(pProfile->profileName, VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME) == 0) {
            *pFormatCount = countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_FORMATS);
        } else {
            *pFormatCount = 0;
        }
        return;
    }

    if (strcmp(pProfile->profileName, VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME) == 0) {
        std::size_t n = std::min<std::size_t>(countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_FORMATS), *pFormatCount);
        for (std::size_t i = 0; i < n; ++i) {
            pFormat[i] = _VP_KHR_1_1_DESKTOP_PORTABILITY_2022_FORMATS[i].format;
        }
    }
}

inline void vpGetProfileFormatProperties(const VpProfileProperties *pProfile, VkFormat format, void *pNext) {
    if (pProfile == nullptr || pNext == nullptr) {
        return;
    }

    struct VkStruct {
        VkStructureType sType;
        void *pNext;
    };

    VkStruct *p = static_cast<VkStruct *>(pNext);

    if (strcmp(pProfile->profileName, VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME) == 0) {
        for (std::size_t i = 0, n = countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_FORMATS); i < n; ++i) {
            const VpFormatProperties &props = _VP_KHR_1_1_DESKTOP_PORTABILITY_2022_FORMATS[i];
            if (props.format != format) continue;

            while (p != nullptr) {
                switch (p->sType) {
                    case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2: {
                        VkFormatProperties2 *pProperties = (VkFormatProperties2 *)p;
                        pProperties->formatProperties.bufferFeatures = static_cast<VkFormatFeatureFlags>(props.bufferFeatures);
                        pProperties->formatProperties.linearTilingFeatures =
                            static_cast<VkFormatFeatureFlags>(props.linearTilingFeatures);
                        pProperties->formatProperties.optimalTilingFeatures =
                            static_cast<VkFormatFeatureFlags>(props.optimalTilingFeatures);
                    } break;
                    case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR: {
                        VkFormatProperties3KHR *pProperties = (VkFormatProperties3KHR *)p;
                        pProperties->bufferFeatures = props.bufferFeatures;
                        pProperties->linearTilingFeatures = props.linearTilingFeatures;
                        pProperties->optimalTilingFeatures = props.optimalTilingFeatures;
                    } break;
                }
                p = static_cast<VkStruct *>(p->pNext);
            }
        }
    }
}

inline void vpGetProfileMemoryTypes(const VpProfileProperties *pProfile, uint32_t *pMemoryPropertyFlagsCount,
                                    VkMemoryPropertyFlags *pMemoryPropertyFlags) {
    if (pMemoryPropertyFlags == nullptr) {
        if (strcmp(pProfile->profileName, VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME) == 0) {
            *pMemoryPropertyFlagsCount = countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_MEMORY_TYPES);
        } else {
            *pMemoryPropertyFlagsCount = 0;
        }
        return;
    }

    if (strcmp(pProfile->profileName, VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME) == 0) {
        std::size_t n =
            std::min<std::size_t>(countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_MEMORY_TYPES), *pMemoryPropertyFlagsCount);
        for (std::size_t i = 0; i < n; ++i) {
            pMemoryPropertyFlags[i] = _VP_KHR_1_1_DESKTOP_PORTABILITY_2022_MEMORY_TYPES[i];
        }
    }
}

inline void vpGetProfileQueueFamilies(const VpProfileProperties *pProfile, uint32_t *pQueueFamilyPropertiesCount,
                                      VkQueueFamilyProperties *pQueueFamilyProperties) {
    if (pQueueFamilyProperties == nullptr) {
        if (strcmp(pProfile->profileName, VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME) == 0) {
            *pQueueFamilyPropertiesCount = countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_QUEUE_FAMILY_PROPERTIES);
        } else {
            *pQueueFamilyPropertiesCount = 0;
        }
        return;
    }

    if (strcmp(pProfile->profileName, VP_LUNARG_1_1_DESKTOP_PORTABILITY_2022_NAME) == 0) {
        std::size_t n = std::min<std::size_t>(countof(_VP_KHR_1_1_DESKTOP_PORTABILITY_2022_QUEUE_FAMILY_PROPERTIES),
                                              *pQueueFamilyPropertiesCount);
        for (std::size_t i = 0; i < n; ++i) {
            pQueueFamilyProperties[i] = _VP_KHR_1_1_DESKTOP_PORTABILITY_2022_QUEUE_FAMILY_PROPERTIES[i];
        }
    }
}
